<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonSchema.Net</name>
    </assembly>
    <members>
        <member name="T:Json.Schema.AdditionalItemsKeyword">
            <summary>
            Handles `additionalItems`.
            </summary>
        </member>
        <member name="F:Json.Schema.AdditionalItemsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.AdditionalItemsKeyword.Schema">
            <summary>
            The schema by which to evaluate additional items.
            </summary>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.AdditionalItemsKeyword"/>.
            </summary>
            <param name="value">The keyword's schema.</param>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.AdditionalItemsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.AdditionalItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.AdditionalItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.AdditionalItemsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.AdditionalItemsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.AdditionalPropertiesKeyword">
            <summary>
            Handles `additionalProperties`.
            </summary>
        </member>
        <member name="F:Json.Schema.AdditionalPropertiesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.AdditionalPropertiesKeyword.Schema">
            <summary>
            The schema by which to evaluate additional properties.
            </summary>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.AdditionalPropertiesKeyword"/>.
            </summary>
            <param name="value">The keyword's schema.</param>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.AdditionalPropertiesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.AdditionalPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.AdditionalPropertiesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.AdditionalPropertiesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.AdditionalPropertiesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.AllOfKeyword">
            <summary>
            Handles `allOf`.
            </summary>
        </member>
        <member name="F:Json.Schema.AllOfKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.AllOfKeyword.Schemas">
            <summary>
            The keywords schema collection.
            </summary>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.AllOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.AllOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AllOfKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.AllOfKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.AllOfKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.AllOfKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.AllOfKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.AllOfKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.AllOfKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.AnchorKeyword">
            <summary>
            Handles `$anchor`.
            </summary>
        </member>
        <member name="F:Json.Schema.AnchorKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.AnchorKeyword.Anchor">
            <summary>
            The value of the anchor.
            </summary>
        </member>
        <member name="M:Json.Schema.AnchorKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.AnchorKeyword"/>.
            </summary>
            <param name="anchor">The anchor value.</param>
        </member>
        <member name="M:Json.Schema.AnchorKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.AnchorKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.AnchorKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.AnchorKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.AnchorKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.AnchorKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.AnchorKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.AnyOfKeyword">
            <summary>
            Handles `anyOf`.
            </summary>
        </member>
        <member name="F:Json.Schema.AnyOfKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.AnyOfKeyword.Schemas">
            <summary>
            The keywords schema collection.
            </summary>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.AnyOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.AnyOfKeyword"/>.
            </summary>
            <param name="values">The set of schemas.</param>
        </member>
        <member name="M:Json.Schema.AnyOfKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.AnyOfKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.AnyOfKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.AnyOfKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.AnyOfKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.AnyOfKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.AnyOfKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.CommentKeyword">
            <summary>
            Handles `$comment`.
            </summary>
        </member>
        <member name="F:Json.Schema.CommentKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.CommentKeyword.Value">
            <summary>
            The comment value.
            </summary>
        </member>
        <member name="M:Json.Schema.CommentKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.CommentKeyword"/>.
            </summary>
            <param name="value">The comment value.</param>
        </member>
        <member name="M:Json.Schema.CommentKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.CommentKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.CommentKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.CommentKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.CommentKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.CommentKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.CommentKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ConstKeyword">
            <summary>
            Handles `const`.
            </summary>
        </member>
        <member name="F:Json.Schema.ConstKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ConstKeyword.Value">
            <summary>
            The constant value.
            </summary>
        </member>
        <member name="M:Json.Schema.ConstKeyword.#ctor(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ConstKeyword"/>.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="M:Json.Schema.ConstKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ConstKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ConstKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ConstKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ConstKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ConstKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ConstKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ErrorMessages">
             <summary>
             Manages error messages returned by built-in keywords.
             </summary>
             <remarks>
             Default messages are provided by culture-specific resource files.
            
             Many messages support tokens in the format `[[foo]]`.
             Each message will specify the tokens it supports.
             </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Const">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ConstKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[value]] - the value in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetConst(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.ConstKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[value]] - the value in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.ContainsTooFew">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ContainsKeyword"/> when there are too few matching items.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of matching items provided in the JSON instance
              - [[minimum]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetContainsTooFew(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.ContainsKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the number of matching items provided in the JSON instance
              - [[minimum]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.ContainsTooMany">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ContainsKeyword"/> when there are too many matching items.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of matching items provided in the JSON instance
              - [[maximum]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetContainsTooMany(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.ContainsKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the number of matching items provided in the JSON instance
              - [[maximum]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Dependencies">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.DependenciesKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[properties]] - the properties which failed to match the requirements
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.DependentRequired">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.DependentRequiredKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[missing]] - the value in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetDependentRequired(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.DependentRequiredKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[missing]] - the value in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.DependentSchemas">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.DependentSchemasKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[value]] - the value in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetDependentSchemas(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.DependentSchemasKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[value]] - the value in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Enum">
             <summary>
             Gets or sets the error message for <see cref="T:Json.Schema.EnumKeyword"/>.
             </summary>
             <remarks>
            	Available tokens are:
               - [[received]] - the value provided in the JSON instance
               - [[values]] - the available values in the schema
            
             The default messages are static and do not use these tokens as enum values
             may be any JSON type and could be quite large.  They are provided to support
             custom messages.
             </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetEnum(System.Globalization.CultureInfo)">
             <summary>
             Gets the error message for <see cref="T:Json.Schema.EnumKeyword"/> for a specific culture.
             </summary>
             <param name="culture">The culture to retrieve.</param>
             <remarks>
            	Available tokens are:
               - [[received]] - the value provided in the JSON instance
               - [[values]] - the available values in the schema
            
             The default messages are static and do not use these tokens as enum values
             may be any JSON type and could be quite large.  They are provided to support
             custom messages.
             </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Culture">
            <summary>
            Gets or sets a culture to use for error messages.  Default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ErrorMessages.ReplaceTokens(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Replaces tokens in the form of `[[token]]` with a specified value, serialized as JSON.
            </summary>
            <param name="message">The message template.</param>
            <param name="parameters">
            Tuple of the token name (without brackets) and the value which will replace it.
            </param>
            <returns>The detokenized string.</returns>
        </member>
        <member name="P:Json.Schema.ErrorMessages.ExclusiveMaximum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ExclusiveMaximumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the upper limit in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetExclusiveMaximum(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.ExclusiveMaximumKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the upper limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.ExclusiveMinimum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.ExclusiveMinimumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the lower limit in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetExclusiveMinimum(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.ExclusiveMinimumKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the lower limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.UnknownFormat">
            <summary>
            Gets or sets the error message for an unknown format.
            </summary>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetUnknownFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for an unknown format.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Format">
            <summary>
            Gets or sets the error message for the <see cref="T:Json.Schema.FormatKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetFormat(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.FormatKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.FormatWithDetail">
            <summary>
            Gets or sets the error message for the <see cref="T:Json.Schema.FormatKeyword"/> with
            additional information from the format validation.
            </summary>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
              - [[detail]] - the detail
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetFormatWithDetail(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.FormatKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[format]] - the format key
              - [[detail]] - the detail
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.InvalidItemsForm">
            <summary>
            Gets or sets the error message for when <see cref="T:Json.Schema.ItemsKeyword"/> is specified
            with an array of schemas in a draft 2020-12 or later schema.
            </summary>
            <remarks>No tokens are supported.</remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.FalseSchema">
            <summary>
            Gets or sets the error message for the "false" schema.
            </summary>
            <remarks>No tokens are supported.</remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Maximum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinimumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the upper limit in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMaximum(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MinimumKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the upper limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MaxItems">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MaxItemsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of items provided in the JSON instance
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMaxItems(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MaxItemsKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the number of items provided in the JSON instance
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MaxLength">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MaxLengthKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the length of the JSON string
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMaxLength(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MaxLengthKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the length of the JSON string
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MaxProperties">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MaxPropertiesKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of properties provided in the JSON instance
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMaxProperties(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MaxPropertiesKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the number of properties provided in the JSON instance
              - [[limit]] - the upper limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Minimum">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinimumKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the lower limit in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMinimum(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MinimumKeyword"/> for a specific culture.
            </summary>
            <param name="culture"></param>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[limit]] - the lower limit in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MinItems">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinItemsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of items provided in the JSON instance
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMinItems(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MinItemsKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the number of items provided in the JSON instance
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MinLength">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinLengthKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the length of the JSON string
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMinLength(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MinLengthKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the length of the JSON string
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MinProperties">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MinPropertiesKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the number of properties provided in the JSON instance
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMinProperties(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MinPropertiesKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the number of properties provided in the JSON instance
              - [[limit]] - the lower limit specified in the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MultipleOf">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.MultipleOfKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[divisor]] - the required divisor
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMultipleOf(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.MultipleOfKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the value provided in the JSON instance
              - [[divisor]] - the required divisor
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.OneOf">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.OneOfKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[count]] - the number of subschemas that passed validation
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetOneOf(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.OneOfKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[count]] - the number of subschemas that passed validation
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.InvalidPattern">
            <summary>
            Gets or sets the error message for when the <see cref="T:Json.Schema.PatternKeyword"/> contains
            an invalid or unsupported regular expression.
            </summary>
            <remarks>
            Available tokens are:
              - [[pattern]] - the regular expression
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Pattern">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.PatternKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[pattern]] - the regular expression
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetPattern(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.PatternKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[pattern]] - the regular expression
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Required">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.RequiredKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[missing]] - the properties missing from the JSON instance
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetRequired(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.RequiredKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[missing]] - the properties missing from the JSON instance
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.MetaSchemaValidation">
            <summary>
            Gets or sets the error message for when the schema cannot be validated
            against the meta-schema.
            </summary>
            <remarks>
            Available tokens are:
              - [[uri]] - the URI of the meta-schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetMetaSchemaValidation(System.Globalization.CultureInfo)">
            <summary>
            Gets or sets the error message for when the schema cannot be validated
            against the meta-schema.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[uri]] - the URI of the meta-schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.Type">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[received]] - the type of value provided in the JSON instance
              - [[expected]] - the type(s) required by the schema
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetType(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.TypeKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[received]] - the type of value provided in the JSON instance
              - [[expected]] - the type(s) required by the schema
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.UniqueItems">
            <summary>
            Gets or sets the error message for <see cref="T:Json.Schema.UniqueItemsKeyword"/>.
            </summary>
            <remarks>
            Available tokens are:
              - [[duplicates]] - the indices of duplicate pairs as a comma-delimited list of "(x, y)" items
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetUniqueItems(System.Globalization.CultureInfo)">
            <summary>
            Gets the error message for <see cref="T:Json.Schema.UniqueItemsKeyword"/> for a specific culture.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[duplicates]] - the indices of duplicate pairs as a comma-delimited list of "(x, y)" items
            </remarks>
        </member>
        <member name="P:Json.Schema.ErrorMessages.UnknownVocabularies">
            <summary>
            Gets or sets the error message for when a vocabulary is unknown but required.
            </summary>
            <remarks>
            Available tokens are:
              - [[vocabs]] - the URI IDs of the missing vocabularies as a comma-delimited list
            </remarks>
        </member>
        <member name="M:Json.Schema.ErrorMessages.GetUnknownVocabularies(System.Globalization.CultureInfo)">
            <summary>
            Gets or sets the error message for when a vocabulary is unknown but required.
            </summary>
            <param name="culture">The culture to retrieve.</param>
            <remarks>
            Available tokens are:
              - [[vocabs]] - the URI IDs of the missing vocabularies as a comma-delimited list
            </remarks>
        </member>
        <member name="T:Json.Schema.ContainsKeyword">
            <summary>
            Handles `contains`.
            </summary>
        </member>
        <member name="F:Json.Schema.ContainsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ContainsKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.ContainsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContainsKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.ContainsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ContainsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ContainsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ContainsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ContainsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ContainsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ContainsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ContentEncodingKeyword">
            <summary>
            Handles `contentMediaEncoding`.
            </summary>
        </member>
        <member name="F:Json.Schema.ContentEncodingKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ContentEncodingKeyword.Value">
            <summary>
            The encoding value.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContentEncodingKeyword"/>.
            </summary>
            <param name="value">The encoding value.</param>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ContentEncodingKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ContentEncodingKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ContentEncodingKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ContentEncodingKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ContentEncodingKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ContentMediaTypeKeyword">
            <summary>
            Handles `contentMediaType`.
            </summary>
        </member>
        <member name="F:Json.Schema.ContentMediaTypeKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ContentMediaTypeKeyword.Value">
            <summary>
            The media type.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContentMediaTypeKeyword"/>.
            </summary>
            <param name="value">The media type.</param>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ContentMediaTypeKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ContentMediaTypeKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ContentMediaTypeKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ContentMediaTypeKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ContentMediaTypeKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ContentSchemaKeyword">
            <summary>
            Handles `contentSchema`.
            </summary>
        </member>
        <member name="F:Json.Schema.ContentSchemaKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ContentSchemaKeyword.Schema">
            <summary>
            The schema against which to evaluate the content.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ContentSchemaKeyword"/>.
            </summary>
            <param name="value">The schema against which to evaluate the content.</param>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ContentSchemaKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ContentSchemaKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ContentSchemaKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ContentSchemaKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ContentSchemaKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DefaultKeyword">
            <summary>
            Handles `default`.
            </summary>
        </member>
        <member name="F:Json.Schema.DefaultKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DefaultKeyword.Value">
            <summary>
            The value to use as the default.
            </summary>
        </member>
        <member name="M:Json.Schema.DefaultKeyword.#ctor(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DefaultKeyword"/>.
            </summary>
            <param name="value">The value to use as the default.</param>
        </member>
        <member name="M:Json.Schema.DefaultKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DefaultKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DefaultKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DefaultKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DefaultKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DefaultKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DefaultKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DefinitionsKeyword">
            <summary>
            Handles `definitions`.
            </summary>
        </member>
        <member name="F:Json.Schema.DefinitionsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DefinitionsKeyword.Definitions">
            <summary>
            The collection of schema definitions.
            </summary>
        </member>
        <member name="M:Json.Schema.DefinitionsKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DefinitionsKeyword"/>.
            </summary>
            <param name="values">The collection of schema definitions.</param>
        </member>
        <member name="M:Json.Schema.DefinitionsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DefinitionsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DefinitionsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DefinitionsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DefinitionsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DefinitionsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DefinitionsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DefsKeyword">
            <summary>
            Handles `$defs`.
            </summary>
        </member>
        <member name="F:Json.Schema.DefsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DefsKeyword.Definitions">
            <summary>
            The collection of schema definitions.
            </summary>
        </member>
        <member name="M:Json.Schema.DefsKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DefsKeyword"/>.
            </summary>
            <param name="values">The collection of schema definitions.</param>
        </member>
        <member name="M:Json.Schema.DefsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DefsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DefsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DefsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DefsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DefsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DefsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DependenciesKeyword">
            <summary>
            Handles `dependencies`.
            </summary>
        </member>
        <member name="F:Json.Schema.DependenciesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DependenciesKeyword.Requirements">
            <summary>
            The collection of dependencies.
            </summary>
        </member>
        <member name="M:Json.Schema.DependenciesKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.SchemaOrPropertyList})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DependenciesKeyword"/>.
            </summary>
            <param name="values">The collection of dependencies.</param>
        </member>
        <member name="M:Json.Schema.DependenciesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DependenciesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DependenciesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DependenciesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DependenciesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DependenciesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DependenciesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.SchemaOrPropertyList">
            <summary>
            A holder for either a schema dependency or a requirements dependency.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaOrPropertyList.Schema">
            <summary>
            The schema dependency.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaOrPropertyList.Requirements">
            <summary>
            The property dependency.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a schema dependency.
            </summary>
            <param name="schema">The schema dependency.</param>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a property dependency.
            </summary>
            <param name="requirements">The property dependency.</param>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.Equals(Json.Schema.SchemaOrPropertyList)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.op_Implicit(Json.Schema.JsonSchema)~Json.Schema.SchemaOrPropertyList">
            <summary>
            Implicitly creates a <see cref="T:Json.Schema.SchemaOrPropertyList"/> from a <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.op_Implicit(System.Collections.Generic.List{System.String})~Json.Schema.SchemaOrPropertyList">
            <summary>
            Implicitly creates a <see cref="T:Json.Schema.SchemaOrPropertyList"/> from a list of strings.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyList.op_Implicit(System.String[])~Json.Schema.SchemaOrPropertyList">
            <summary>
            Implicitly creates a <see cref="T:Json.Schema.SchemaOrPropertyList"/> from an array of strings.
            </summary>
        </member>
        <member name="T:Json.Schema.SchemaOrPropertyListJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.SchemaOrPropertyList"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyListJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.SchemaOrPropertyList"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.SchemaOrPropertyListJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.SchemaOrPropertyList,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DependentRequiredKeyword">
            <summary>
            Handles `dependentRequired`.
            </summary>
        </member>
        <member name="F:Json.Schema.DependentRequiredKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DependentRequiredKeyword.Requirements">
            <summary>
            The collection of "required"-type dependencies.
            </summary>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DependentRequiredKeyword"/>.
            </summary>
            <param name="values">The collection of "required"-type dependencies.</param>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DependentRequiredKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DependentRequiredKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DependentRequiredKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DependentRequiredKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DependentRequiredKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DependentSchemasKeyword">
            <summary>
            Handles `dependentSchemas`.
            </summary>
        </member>
        <member name="F:Json.Schema.DependentSchemasKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DependentSchemasKeyword.Schemas">
            <summary>
            The collection of "schema"-type dependencies.
            </summary>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.DependentSchemasKeyword"/>.
            </summary>
            <param name="values">The collection of "schema"-type dependencies.</param>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DependentSchemasKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DependentSchemasKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DependentSchemasKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DependentSchemasKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DependentSchemasKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DependsOnAnnotationsFromAttribute">
            <summary>
            Indicates a keyword from which the decorated keyword requires annotations.
            </summary>
            <summary>
            Apply this attribute to your schema keyword to indicate a dependency on another keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DependsOnAnnotationsFromAttribute.DependentType">
            <summary>
            The dependent type.
            </summary>
        </member>
        <member name="M:Json.Schema.DependsOnAnnotationsFromAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DependsOnAnnotationsFromAttribute"/> instance.
            </summary>
            <param name="type">The dependent type.</param>
        </member>
        <member name="T:Json.Schema.DeprecatedKeyword">
            <summary>
            Handles `deprecated`.
            </summary>
        </member>
        <member name="F:Json.Schema.DeprecatedKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DeprecatedKeyword.Value">
            <summary>
            Whether the schema is deprecated.
            </summary>
        </member>
        <member name="M:Json.Schema.DeprecatedKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DeprecatedKeyword"/>.
            </summary>
            <param name="value">Whether the schema is deprecated.</param>
        </member>
        <member name="M:Json.Schema.DeprecatedKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DeprecatedKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DeprecatedKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DeprecatedKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DeprecatedKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DeprecatedKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DeprecatedKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DescriptionKeyword">
            <summary>
            Handles `description`.
            </summary>
        </member>
        <member name="F:Json.Schema.DescriptionKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DescriptionKeyword.Value">
            <summary>
            The description.
            </summary>
        </member>
        <member name="M:Json.Schema.DescriptionKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DescriptionKeyword"/>.
            </summary>
            <param name="value">The description.</param>
        </member>
        <member name="M:Json.Schema.DescriptionKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DescriptionKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DescriptionKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DescriptionKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DescriptionKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DescriptionKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DescriptionKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.Duration">
            <summary>
            Represents an ISO 8601 ABNF duration value.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Years">
            <summary>
            The number of years.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Months">
            <summary>
            The number of months.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Weeks">
            <summary>
            The number of weeks.  Incompatible with <see cref="P:Json.Schema.Duration.Years"/>, <see cref="P:Json.Schema.Duration.Months"/>, and <see cref="P:Json.Schema.Duration.Days"/>.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Days">
            <summary>
            The number of days.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Hours">
            <summary>
            The number of hours.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Minutes">
            <summary>
            The number of minutes.
            </summary>
        </member>
        <member name="P:Json.Schema.Duration.Seconds">
            <summary>
            The number of seconds.
            </summary>
        </member>
        <member name="M:Json.Schema.Duration.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Json.Schema.Duration"/> from a string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A duration.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="source"/> does not contains a valid duration string.</exception>
        </member>
        <member name="M:Json.Schema.Duration.TryParse(System.String,Json.Schema.Duration@)">
            <summary>
            Parses a <see cref="T:Json.Schema.Duration"/> from a string.
            </summary>
            <param name="source">The source string.</param>
            <param name="duration">The resulting duration.</param>
            <returns>`true` if the parse was successful; `false` otherwise.</returns>
        </member>
        <member name="T:Json.Schema.DynamicAnchorKeyword">
            <summary>
            Handles `$dynamicAnchor`.
            </summary>
        </member>
        <member name="F:Json.Schema.DynamicAnchorKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DynamicAnchorKeyword.Value">
            <summary>
            Gets the anchor value.
            </summary>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DynamicAnchorKeyword"/>.
            </summary>
            <param name="value">The anchor value.</param>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DynamicAnchorKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DynamicAnchorKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DynamicAnchorKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DynamicAnchorKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DynamicAnchorKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DynamicRefKeyword">
            <summary>
            Handles `$dynamicRef`.
            </summary>
        </member>
        <member name="F:Json.Schema.DynamicRefKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.DynamicRefKeyword.Reference">
            <summary>
            The URI reference.
            </summary>
        </member>
        <member name="M:Json.Schema.DynamicRefKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.DynamicRefKeyword"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Json.Schema.DynamicRefKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.DynamicRefKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.DynamicRefKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.DynamicRefKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.DynamicRefKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.DynamicRefKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.DynamicRefKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.DynamicScope">
            <summary>
            Tracks the dynamic scope during schema evaluation.
            </summary>
            <remarks>
            Dynamic scope is the collection of URIs (defined by `$id`) represented by the evaluation path.
            </remarks>
        </member>
        <member name="P:Json.Schema.DynamicScope.LocalScope">
            <summary>
            Gets the local scope, or the most recent schema URI encountered.
            </summary>
        </member>
        <member name="M:Json.Schema.DynamicScope.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Json.Schema.DynamicScope.Equals(Json.Schema.DynamicScope)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DynamicScope.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.DynamicScope.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Json.Schema.ElseKeyword">
            <summary>
            Handles `else`.
            </summary>
        </member>
        <member name="F:Json.Schema.ElseKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ElseKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.ElseKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ElseKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.ElseKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ElseKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ElseKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ElseKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ElseKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ElseKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ElseKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.EnumerableExtensions">
            <summary>
            More extensions on <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.ContentsEqual``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Determines contents-based equality: each element appears equally in each set.
            </summary>
            <param name="collection">The first collection.</param>
            <param name="other">The second collection.</param>
            <typeparam name="T">The element type.</typeparam>
            <returns>`true` if the collections contain the same number of the same elements; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.ContentsEqual``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines contents-based equality: each element appears equally in each set.
            </summary>
            <param name="collection">The first collection.</param>
            <param name="other">The second collection.</param>
            <param name="comparer">A custom equality comparer.</param>
            <typeparam name="T">The element type.</typeparam>
            <returns>`true` if the collections contain the same number of the same elements; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.GetStringDictionaryHashCode``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Gets a string-dictionary-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>
            This can be used to correctly compare the contents of string dictionaries where
            key ordering is not important.
            </remarks>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.GetStringDictionaryHashCode``1(System.Collections.Generic.IReadOnlyDictionary{System.String,``0})">
            <summary>
            Gets a string-dictionary-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>
            This can be used to correctly compare the contents of string dictionaries where
            key ordering is not important.
            </remarks>
        </member>
        <member name="M:Json.Schema.EnumerableExtensions.GetUnorderedCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a collection-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>This can be used to correctly compare the contents of collections.</remarks>
        </member>
        <member name="T:Json.Schema.EnumKeyword">
            <summary>
            Handles `enum`.
            </summary>
        </member>
        <member name="F:Json.Schema.EnumKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.EnumKeyword.RequireUniqueValues">
            <summary>
            Gets or sets whether the keyword will check for unique values when deserializing.
            </summary>
            <remarks>
            The specification states that values SHOULD be unique.  As this is not a "MUST"
            requirement, implementations need to support multiple values.  This setting
            allows enforcement of unique values.  It is recommended, but off by default
            for specification compliance.
            </remarks>
        </member>
        <member name="P:Json.Schema.EnumKeyword.Values">
            <summary>
            The collection of enum values.
            </summary>
            <remarks>
            Enum values aren't necessarily strings; they can be of any JSON value.
            </remarks>
        </member>
        <member name="M:Json.Schema.EnumKeyword.#ctor(System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.EnumKeyword"/>.
            </summary>
            <param name="values">The collection of enum values.</param>
        </member>
        <member name="M:Json.Schema.EnumKeyword.#ctor(System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Creates a new <see cref="T:Json.Schema.EnumKeyword"/>.
            </summary>
            <param name="values">The collection of enum values.</param>
        </member>
        <member name="M:Json.Schema.EnumKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.EnumKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.EnumKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.EnumKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.EnumKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.EnumKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.EnumKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.EvaluationContext">
            <summary>
            Provides contextual data for generating constraints and performing evaluations.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationContext.Options">
            <summary>
            Gets the evaluation options.
            </summary>
            <remarks>
            This may be different per run, so it's important this not be captured by constraints.
            </remarks>
        </member>
        <member name="P:Json.Schema.EvaluationContext.Scope">
            <summary>
            Gets the dynamic scope.
            </summary>
            <remarks>
            The dynamic scope is the collection of URIs that evaluation has passed through to get
            to the current location.  This is important when processing references.
            </remarks>
        </member>
        <member name="P:Json.Schema.EvaluationContext.Dialect">
            <summary>
            The vocabularies defined by the schema in the local scope.
            </summary>
            <remarks>
            Due to historic evolution of JSON Schema, some keywords (particularly `format`) require
            knowledge of the active vocabularies in order to process correctly.
            </remarks>
        </member>
        <member name="P:Json.Schema.EvaluationContext.EvaluatingAs">
            <summary>
            Gets the spec version that the schema is currently being evaluated under.
            </summary>
            <remarks>
            This property is informed by the `$schema` keyword and <see cref="P:Json.Schema.EvaluationOptions.EvaluateAs"/>,
            taking `$schema` as priority.
            </remarks>
        </member>
        <member name="T:Json.Schema.ConstraintExtensions">
            <summary>
            Convenience extensions for building constraints and processing evaluations.
            </summary>
        </member>
        <member name="M:Json.Schema.ConstraintExtensions.GetKeywordEvaluation``1(Json.Schema.KeywordEvaluation)">
            <summary>
            Gets an evaluation from a keyword with the given type.
            </summary>
            <typeparam name="T">The keyword type.</typeparam>
            <param name="evaluation">The source evaluation.</param>
            <returns>The keyword evaluation, if it exists.</returns>
        </member>
        <member name="M:Json.Schema.ConstraintExtensions.GetKeywordConstraint``1(System.Collections.Generic.IEnumerable{Json.Schema.KeywordConstraint})">
            <summary>
            Gets a constraint from a keyword with the given type.
            </summary>
            <typeparam name="T">The keyword type.</typeparam>
            <param name="constraints">The set of constraints.</param>
            <returns>The keyword evaluation, if it exists.</returns>
        </member>
        <member name="T:Json.Schema.EvaluationOptions">
            <summary>
            Allows configuration of the evaluation process.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.Default">
            <summary>
            The default settings.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.EvaluateAs">
            <summary>
            Indicates which specification version to process as.  This will filter the keywords
            of a schema based on their support.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.ValidateAgainstMetaSchema">
            <summary>
            Indicates whether the schema should be validated against its `$schema` value.
            this is not typically necessary.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.OutputFormat">
            <summary>
            Specifies the output format.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.SchemaRegistry">
            <summary>
            The local schema registry.  If a schema is not found here, it will
            automatically check the global registry as well.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.VocabularyRegistry">
            <summary>
            The local vocabulary registry.  If a schema is not found here, it will
            automatically check the global registry as well.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.RequireFormatValidation">
            <summary>
            Specifies whether the `format` keyword should be required to provide
            validation results.  Default is false, which just produces annotations
            for drafts 2019-09 and prior or follows the behavior set forth by the
            format-annotation vocabulary requirement in the `$vocabulary` keyword in
            a meta-schema declaring draft 2020-12.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.OnlyKnownFormats">
            <summary>
            Specifies whether the `format` keyword should fail validations for
            unknown formats.  Default is false.
            </summary>
            <remarks>
            This option is applied whether `format` is using annotation or
            assertion behavior.
            </remarks>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.ProcessCustomKeywords">
            <summary>
            Specifies whether custom keywords that aren't defined in vocabularies
            should be processed.  Default is false.
            </summary>
            <remarks>
            Custom keywords are those which have associated <see cref="T:Json.Schema.IJsonSchemaKeyword"/>
            implementations.  Unrecognized keywords, for which annotations should
            be collected, are not considered "custom."
            
            Only applies to vocab-enabled JSON Schema versions
            (e.g. draft 2019-09 &amp;amp; 20200-12).
            annotations.
            </remarks>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.PreserveDroppedAnnotations">
            <summary>
            If enabled, annotations that are dropped as a result of a failing
            subschema will be reported in a `droppedAnnotations` property in
            the output.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.AddAnnotationForUnknownKeywords">
            <summary>
            Outputs an annotation that lists any unknown keywords.  Can be
            useful for catching typos.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.IgnoredAnnotations">
            <summary>
            Gets the set of keyword types from which annotations will be ignored.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationOptions.Culture">
            <summary>
            Gets or sets the culture for error messages.  Overrides <see cref="P:Json.Schema.ErrorMessages.Culture"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.EvaluationOptions.#ctor">
            <summary>
            Create a new instance of the <see cref="T:Json.Schema.EvaluationOptions"/> class.
            </summary>
        </member>
        <member name="M:Json.Schema.EvaluationOptions.From(Json.Schema.EvaluationOptions)">
            <summary>
            Creates a deep copy of the options.
            </summary>
            <param name="other">The source options.</param>
            <returns>A new options instance with the same settings.</returns>
        </member>
        <member name="M:Json.Schema.EvaluationOptions.IgnoreAnnotationsFrom``1">
            <summary>
            Ignores annotations from the specified keyword.
            </summary>
            <typeparam name="T">The keyword type which should not have annotations.</typeparam>
        </member>
        <member name="M:Json.Schema.EvaluationOptions.IgnoreAllAnnotations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Json.Schema.EvaluationOptions.ClearIgnoredAnnotations">
            <summary>
            Clears ignored annotations.
            </summary>
        </member>
        <member name="M:Json.Schema.EvaluationOptions.CollectAnnotationsFrom``1">
            <summary>
            Restores annotation collection for the specified keyword.
            </summary>
        </member>
        <member name="T:Json.Schema.EvaluationResults">
            <summary>
            The results object for evaluations.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.IsValid">
            <summary>
            Indicates whether the validation passed or failed.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.EvaluationPath">
            <summary>
            The schema location that generated this node.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.InstanceLocation">
            <summary>
            The instance location that was processed.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.SchemaLocation">
            <summary>
            The absolute schema location.
            </summary>
            <remarks>
            If the schema did not have an absolute `$id`, a generated base URI will be used.
            </remarks>
        </member>
        <member name="P:Json.Schema.EvaluationResults.Details">
            <summary>
            The collection of nested results.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.HasDetails">
            <summary>
            Gets whether there are nested results.
            </summary>
            <remarks>
            Because <see cref="P:Json.Schema.EvaluationResults.Details"/> is lazily loaded, this property allows the check without
            the side effect of allocating a list object.
            </remarks>
        </member>
        <member name="P:Json.Schema.EvaluationResults.Annotations">
            <summary>
            The collection of annotations from this node.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.HasAnnotations">
            <summary>
            Gets whether this node has annotations.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.Errors">
            <summary>
            The collection of error from this node.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.HasErrors">
            <summary>
            Gets whether this node has errors.
            </summary>
        </member>
        <member name="P:Json.Schema.EvaluationResults.Parent">
            <summary>
            Gets the parent result.
            </summary>
        </member>
        <member name="M:Json.Schema.EvaluationResults.ToList">
            <summary>
            Transforms the results to the `basic` format.
            </summary>
        </member>
        <member name="M:Json.Schema.EvaluationResults.ToFlag">
            <summary>
            Transforms the results to the `flag` format.
            </summary>
        </member>
        <member name="M:Json.Schema.EvaluationResults.SetAnnotation(System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Sets an annotation.
            </summary>
            <param name="keyword">The annotation key.  Typically the name of the keyword.</param>
            <param name="value">The annotation value.</param>
        </member>
        <member name="M:Json.Schema.EvaluationResults.TryGetAnnotation(System.String,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Tries to get an annotation.
            </summary>
            <param name="keyword">The annotation key.</param>
            <param name="annotation"></param>
            <returns>The annotation or null.</returns>
        </member>
        <member name="M:Json.Schema.EvaluationResults.GetAllAnnotations(System.String)">
            <summary>
            Gets all annotations of a particular data type for the current evaluation level.
            </summary>
            <param name="keyword">The key under which the annotation is stored.  Typically a keyword.</param>
            <returns>The set of all annotations for the current evaluation level.</returns>
        </member>
        <member name="M:Json.Schema.EvaluationResults.Fail">
            <summary>
            Marks the result as invalid.
            </summary>
            <remarks>
            For better support for customization, consider using the overload that takes parameters.
            </remarks>
        </member>
        <member name="M:Json.Schema.EvaluationResults.Fail(System.String,System.String)">
            <summary>
            Marks the result as invalid.
            </summary>
            <param name="keyword">The keyword that failed validation.</param>
            <param name="message">An error message.</param>
            <remarks>
            For better support for customization, consider using the overload that takes parameters.
            </remarks>
        </member>
        <member name="M:Json.Schema.EvaluationResults.Fail(System.String,System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Marks the result as invalid.
            </summary>
            <param name="keyword">The keyword that failed validation.</param>
            <param name="message">The error message.</param>
            <param name="parameters">Parameters to replace in the message.</param>
        </member>
        <member name="T:Json.Schema.Pre202012EvaluationResultsJsonConverter">
            <summary>
            Produces output formats specified by 2019-09 and 2020-12.
            </summary>
        </member>
        <member name="T:Json.Schema.Pre202012EvaluationResultsJsonConverter.Annotation">
            <summary>
            Holder for an annotation value.
            </summary>
        </member>
        <member name="P:Json.Schema.Pre202012EvaluationResultsJsonConverter.Annotation.Owner">
            <summary>
            The keyword that created the annotation (acts as a key for lookup).
            </summary>
        </member>
        <member name="P:Json.Schema.Pre202012EvaluationResultsJsonConverter.Annotation.Value">
            <summary>
            The annotation value.
            </summary>
        </member>
        <member name="P:Json.Schema.Pre202012EvaluationResultsJsonConverter.Annotation.Source">
            <summary>
            The pointer to the keyword that created the annotation.
            </summary>
        </member>
        <member name="M:Json.Schema.Pre202012EvaluationResultsJsonConverter.Annotation.#ctor(System.String,System.Object,Json.Pointer.JsonPointer@)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Pre202012EvaluationResultsJsonConverter.Annotation"/>.
            </summary>
            <param name="owner">The keyword that created the annotation (acts as a key for lookup).</param>
            <param name="value">The annotation value.</param>
            <param name="source">The pointer to the keyword that created the annotation.</param>
        </member>
        <member name="M:Json.Schema.Pre202012EvaluationResultsJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.EvaluationResults"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.Pre202012EvaluationResultsJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.EvaluationResults,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ExamplesKeyword">
            <summary>
            Handles `examples`.
            </summary>
        </member>
        <member name="F:Json.Schema.ExamplesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ExamplesKeyword.Values">
            <summary>
            The collection of example values.
            </summary>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.#ctor(System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExamplesKeyword"/>.
            </summary>
            <param name="values">The collection of example values.</param>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.#ctor(System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExamplesKeyword"/>.
            </summary>
            <param name="values">The collection of example values.</param>
        </member>
        <member name="M:Json.Schema.ExamplesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ExamplesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ExamplesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ExamplesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ExamplesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ExamplesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ExamplesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ExclusiveMaximumKeyword">
            <summary>
            Handles `exclusiveMaximum`.
            </summary>
        </member>
        <member name="F:Json.Schema.ExclusiveMaximumKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ExclusiveMaximumKeyword.Value">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExclusiveMaximumKeyword"/>.
            </summary>
            <param name="value">The maximum value.</param>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ExclusiveMaximumKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ExclusiveMaximumKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ExclusiveMaximumKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ExclusiveMaximumKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ExclusiveMaximumKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ExclusiveMinimumKeyword">
            <summary>
            Handles `exclusiveMinimum`.
            </summary>
        </member>
        <member name="F:Json.Schema.ExclusiveMinimumKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ExclusiveMinimumKeyword.Value">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ExclusiveMinimumKeyword"/>.
            </summary>
            <param name="value">The minimum value.</param>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ExclusiveMinimumKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ExclusiveMinimumKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ExclusiveMinimumKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ExclusiveMinimumKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ExclusiveMinimumKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.Format">
            <summary>
            Represents a format.
            </summary>
        </member>
        <member name="P:Json.Schema.Format.Key">
            <summary>
            The format key.
            </summary>
        </member>
        <member name="M:Json.Schema.Format.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Format"/>.
            </summary>
            <param name="key">The format key.</param>
        </member>
        <member name="M:Json.Schema.Format.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="node">The node to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="T:Json.Schema.FormatKeyword">
            <summary>
            Handles `format`.
            </summary>
        </member>
        <member name="F:Json.Schema.FormatKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.FormatKeyword.Value">
            <summary>
            The format.
            </summary>
        </member>
        <member name="M:Json.Schema.FormatKeyword.#ctor(Json.Schema.Format)">
            <summary>
            Creates a new <see cref="T:Json.Schema.FormatKeyword"/>.
            </summary>
            <param name="value">The format.</param>
        </member>
        <member name="M:Json.Schema.FormatKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.FormatKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.FormatKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.FormatKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.FormatKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.FormatKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.FormatKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.Formats">
            <summary>
            The formats supported by JSON Schema base specifications.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Date">
            <summary>
            Defines the `date` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.DateTime">
            <summary>
            Defines the `date-time` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Duration">
            <summary>
            Defines the `duration` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Email">
            <summary>
            Defines the `email` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Hostname">
            <summary>
            Defines the `hostname` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.IdnEmail">
            <summary>
            Defines the `idn-email` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.IdnHostname">
            <summary>
            Defines the `idn-hostname` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Ipv4">
            <summary>
            Defines the `ipv4` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Ipv6">
            <summary>
            Defines the `ipv6` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Iri">
            <summary>
            Defines the `iri` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.IriReference">
            <summary>
            Defines the `iri-reference` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.JsonPointer">
            <summary>
            Defines the `json-pointer` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Regex">
            <summary>
            Defines the `regex` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.RelativeJsonPointer">
            <summary>
            Defines the `relative-json-pointer` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Time">
            <summary>
            Defines the `time` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.Uri">
            <summary>
            Defines the `uri` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.UriReference">
            <summary>
            Defines the `uri-reference` format.
            </summary>
        </member>
        <member name="F:Json.Schema.Formats.UriTemplate">
            <summary>
            Defines the `uri-template` format.
            </summary>
            <remarks>
            This is currently the same check as `uri`.  The infrastructure to check URI templates
            [does not yet exist in .Net Standard/Core](https://github.com/dotnet/runtime/issues/41587).
            </remarks>
        </member>
        <member name="F:Json.Schema.Formats.Uuid">
            <summary>
            Defines the `uuid` format.
            </summary>
        </member>
        <member name="M:Json.Schema.Formats.Get(System.String)">
            <summary>
            Gets a format by its key.
            </summary>
            <param name="key">The key.</param>
            <returns>The specified format, if known; otherwise null.</returns>
        </member>
        <member name="M:Json.Schema.Formats.Register(Json.Schema.Format)">
            <summary>
            Registers a new format.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Json.Schema.Formats.CreateUnknown(System.String)">
            <summary>
            Creates an unknown format.
            </summary>
            <param name="name">The format key.</param>
            <returns>A <see cref="T:Json.Schema.Format"/> instance.</returns>
        </member>
        <member name="T:Json.Schema.IBaseDocument">
            <summary>
            Represents an identifiable or locatable base document that may be or contain a JSON Schema.
            </summary>
        </member>
        <member name="P:Json.Schema.IBaseDocument.BaseUri">
             <summary>
             Gets the base URI that applies to this schema.  This may be defined by a parent schema.
             </summary>
             <remarks>
             This property is initialized to a generated random value that matches `https://json-everything.net/{random}`
             where `random` is 10 hex characters.
            
             It may change after the initial evaluation based on whether the schema contains an `$id` keyword
             or is a child of another schema.
             </remarks>
        </member>
        <member name="M:Json.Schema.IBaseDocument.FindSubschema(Json.Pointer.JsonPointer,Json.Schema.EvaluationOptions)">
            <summary>
            Finds a schema within the document.
            </summary>
            <param name="pointer">A JSON Pointer to the location of the schema within the document.</param>
            <param name="options">Evaluation options.  This is needed for internal processing.</param>
            <returns>A JSON Schema, if found.</returns>
        </member>
        <member name="T:Json.Schema.ICustomSchemaCollector">
            <summary>
            Indicates that the keyword contains subschemas in such a way that does not
            fit with <see cref="T:Json.Schema.ISchemaContainer"/>, <see cref="T:Json.Schema.ISchemaCollector"/>, or
            <see cref="T:Json.Schema.IKeyedSchemaCollector"/>.
            </summary>
        </member>
        <member name="P:Json.Schema.ICustomSchemaCollector.Schemas">
            <summary>
            The subschemas.
            </summary>
        </member>
        <member name="M:Json.Schema.ICustomSchemaCollector.FindSubschema(System.Collections.Generic.IReadOnlyList{Json.Pointer.PointerSegment})">
            <summary>
            Gets the indicated subschema.
            </summary>
            <param name="segments">The JSON Pointer segments to follow.</param>
            <returns>If found, the schema and the number of segments followed to find the subschema; `(null, 0)` otherwise.</returns>
        </member>
        <member name="T:Json.Schema.IdKeyword">
            <summary>
            Handles `$id`.
            </summary>
        </member>
        <member name="F:Json.Schema.IdKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.IdKeyword.Id">
            <summary>
            Defines the URI ID.
            </summary>
        </member>
        <member name="M:Json.Schema.IdKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.IdKeyword"/>.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:Json.Schema.IdKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.IdKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.IdKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.IdKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.IdKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.IdKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.IdKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.IfKeyword">
            <summary>
            Handles `if`.
            </summary>
        </member>
        <member name="F:Json.Schema.IfKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.IfKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.IfKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.IfKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.IfKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.IfKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.IfKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.IfKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.IfKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.IfKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.IfKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.IIdKeyword">
            <summary>
            Allows definition of a custom schema identifier keyword.
            WARNING - Foot-gun mode: use only if you know what you're doing.
            </summary>
        </member>
        <member name="P:Json.Schema.IIdKeyword.Id">
            <summary>
            Defines the URI ID.
            </summary>
        </member>
        <member name="T:Json.Schema.IJsonSchemaKeyword">
            <summary>
            Defines basic functionality for schema keywords.
            </summary>
        </member>
        <member name="M:Json.Schema.IJsonSchemaKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.IKeyedSchemaCollector">
            <summary>
            Indicates that the keyword contains a named collection of schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.IKeyedSchemaCollector.Schemas">
            <summary>
            The subschemas.
            </summary>
        </member>
        <member name="T:Json.Schema.ISchemaCollector">
            <summary>
            Indicates that the keyword contains a collection of schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.ISchemaCollector.Schemas">
            <summary>
            The subschemas.
            </summary>
        </member>
        <member name="T:Json.Schema.ISchemaContainer">
            <summary>
            Indicates that the keyword contains a single schema.
            </summary>
        </member>
        <member name="P:Json.Schema.ISchemaContainer.Schema">
            <summary>
            A subschema.
            </summary>
        </member>
        <member name="T:Json.Schema.ItemsKeyword">
            <summary>
            Handles `items`.
            </summary>
        </member>
        <member name="F:Json.Schema.ItemsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ItemsKeyword.SingleSchema">
            <summary>
            The schema for the "single schema" form.
            </summary>
        </member>
        <member name="P:Json.Schema.ItemsKeyword.ArraySchemas">
            <summary>
            The collection of schemas for the "schema array" form.
            </summary>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ItemsKeyword"/>.
            </summary>
            <param name="value">The schema for the "single schema" form.</param>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.ItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
            <remarks>
            Using the `params` constructor to build an array-form `items` keyword with a single schema
            will confuse the compiler.  To achieve this, you'll need to explicitly specify the array.
            </remarks>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.ItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
        </member>
        <member name="M:Json.Schema.ItemsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ItemsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ItemsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ItemsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ItemsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.JsonNodeBaseDocument">
            <summary>
            Provides a general <see cref="T:Json.Schema.IBaseDocument"/> implementation for a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="P:Json.Schema.JsonNodeBaseDocument.BaseUri">
             <summary>
             Gets the base URI that applies to this schema.  This may be defined by a parent schema.
             </summary>
             <remarks>
             This property is initialized to a generated random value that matches `https://json-everything.net/{random}`
             where `random` is 10 hex characters.
            
             It may change after the initial evaluation based on whether the schema contains an `$id` keyword
             or is a child of another schema.
             </remarks>
        </member>
        <member name="M:Json.Schema.JsonNodeBaseDocument.#ctor(System.Text.Json.Nodes.JsonNode,System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.JsonNodeBaseDocument"/>.
            </summary>
            <param name="node">The JsonNode.</param>
            <param name="baseUri">The identifying base URI.</param>
        </member>
        <member name="M:Json.Schema.JsonNodeBaseDocument.FindSubschema(Json.Pointer.JsonPointer,Json.Schema.EvaluationOptions)">
            <summary>
            Finds a schema within the document.
            </summary>
            <param name="pointer">A JSON Pointer to the location of the schema within the document.</param>
            <param name="options">Evaluation options.  This is needed for internal processing.</param>
            <returns>A JSON Schema, if found.</returns>
        </member>
        <member name="T:Json.Schema.JsonNodeExtensions">
            <summary>
            Provides some schema-related functionality for <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonNodeExtensions.GetSchemaValueType(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Provides the JSON Schema type of a node.
            </summary>
            <param name="node">The node.</param>
            <returns>The <see cref="T:Json.Schema.SchemaValueType"/> of the node.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Json.Schema.JsonNodeExtensions.VerifyJsonObject(System.Text.Json.Nodes.JsonObject)">
            <summary>
            Verifies that a <see cref="T:System.Text.Json.Nodes.JsonObject"/> doesn't have any duplicate keys and can
            therefore be processed.
            </summary>
            <param name="obj">The object.</param>
            <returns>true if the the object can be processed; false otherwise.</returns>
            <remarks>See https://github.com/dotnet/runtime/issues/70604 for more information.</remarks>
        </member>
        <member name="T:Json.Schema.JsonPointers">
            <summary>
            Defines some commonly used JSON Pointer constructs.
            </summary>
            <remarks>
            These should be used whenever possible instead of allocating new instances.
            </remarks>
        </member>
        <member name="F:Json.Schema.JsonPointers.SingleEmptyPointerArray">
            <summary>
            Defines an array containing only a single empty JSON Pointer.
            </summary>
        </member>
        <member name="T:Json.Schema.JsonSchema">
            <summary>
            Represents a JSON Schema.
            </summary>
        </member>
        <member name="F:Json.Schema.JsonSchema.Empty">
            <summary>
            The empty schema `{}`.  Functionally equivalent to <see cref="F:Json.Schema.JsonSchema.True"/>.
            </summary>
        </member>
        <member name="F:Json.Schema.JsonSchema.True">
            <summary>
            The `true` schema.  Passes all instances.
            </summary>
        </member>
        <member name="F:Json.Schema.JsonSchema.False">
            <summary>
            The `false` schema.  Fails all instances.
            </summary>
        </member>
        <member name="P:Json.Schema.JsonSchema.Keywords">
            <summary>
            Gets the keywords contained in the schema.  Only populated for non-boolean schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.JsonSchema.Item(System.String)">
            <summary>
            Gets the keyword class by keyword name.
            </summary>
            <param name="keyword">The keyword name.</param>
            <returns>The keyword implementation if it exists in the schema.</returns>
        </member>
        <member name="P:Json.Schema.JsonSchema.BoolValue">
            <summary>
            For boolean schemas, gets the value.  Null if the schema isn't a boolean schema.
            </summary>
        </member>
        <member name="P:Json.Schema.JsonSchema.BaseUri">
             <summary>
             Gets the base URI that applies to this schema.  This may be defined by a parent schema.
             </summary>
             <remarks>
             This property is initialized to a generated random value that matches `https://json-everything.net/{random}`
             where `random` is 10 hex characters.
            
             It may change after the initial evaluation based on whether the schema contains an `$id` keyword
             or is a child of another schema.
             </remarks>
        </member>
        <member name="P:Json.Schema.JsonSchema.IsResourceRoot">
            <summary>
            Gets whether the schema defines a new schema resource.  This will only be true if it contains an `$id` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.JsonSchema.DeclaredVersion">
            <summary>
            Gets the specification version as determined by analyzing the `$schema` keyword, if it exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchema.FromFile(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Loads text from a file and deserializes a <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
            <param name="fileName">The filename to load, URL-decoded.</param>
            <param name="options">Serializer options.</param>
            <returns>A new <see cref="T:Json.Schema.JsonSchema"/>.</returns>
            <exception cref="T:System.Text.Json.JsonException">Could not deserialize a portion of the schema.</exception>
            <remarks>The filename needs to not be URL-encoded as <see cref="T:System.Uri"/> attempts to encode it.</remarks>
        </member>
        <member name="M:Json.Schema.JsonSchema.FromText(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserializes a <see cref="T:Json.Schema.JsonSchema"/> from text.
            </summary>
            <param name="jsonText">The text to parse.</param>
            <param name="options">Serializer options.</param>
            <returns>A new <see cref="T:Json.Schema.JsonSchema"/>.</returns>
            <exception cref="T:System.Text.Json.JsonException">Could not deserialize a portion of the schema.</exception>
        </member>
        <member name="M:Json.Schema.JsonSchema.FromStream(System.IO.Stream,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Deserializes a <see cref="T:Json.Schema.JsonSchema"/> from a stream.
            </summary>
            <param name="source">A stream.</param>
            <param name="options">Serializer options.</param>
            <returns>A new <see cref="T:Json.Schema.JsonSchema"/>.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.AutoEvaluate(System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)">
            <summary>
            Evaluates an instance by automatically determining the schema to use by examining
            the instance's `$schema` key.
            </summary>
            <param name="root">The root instance.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
            <exception cref="T:System.ArgumentException">
            Throw when the instance doesn't have a `$schema` key, when the value under `$schema` is not
            an absolute URI, or when the URI is not associated with a registered schema.
            </exception>
        </member>
        <member name="M:Json.Schema.JsonSchema.GetKeyword``1">
            <summary>
            Gets a specified keyword if it exists.
            </summary>
            <typeparam name="T">The type of the keyword to get.</typeparam>
            <returns>The keyword if it exists; otherwise null.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.TryGetKeyword``1(``0@)">
            <summary>
            Gets a specified keyword if it exists.
            </summary>
            <param name="keyword">The keyword if it exists; otherwise null.</param>
            <typeparam name="T">The type of the keyword to get.</typeparam>
            <returns>true if the keyword exists; otherwise false.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.TryGetKeyword``1(System.String,``0@)">
            <summary>
            Gets a specified keyword if it exists.
            </summary>
            <typeparam name="T">The type of the keyword to get.</typeparam>
            <param name="keywordName">The name of the keyword.</param>
            <param name="keyword">The keyword if it exists; otherwise null.</param>
            <returns>true if the keyword exists; otherwise false.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.Evaluate(System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)">
            <summary>
            Evaluates an instance against this schema.
            </summary>
            <param name="root">The root instance.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.GetConstraint(Json.Pointer.JsonPointer,Json.Pointer.JsonPointer,Json.Pointer.JsonPointer,Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint for the schema.
            </summary>
            <param name="relativeEvaluationPath">
            The relative evaluation path in JSON Pointer form.  Generally this will be a keyword name,
            but may have other segments, such as in the case of `properties` which also has the property name.
            </param>
            <param name="baseInstanceLocation">The base location within the instance that is being evaluated.</param>
            <param name="relativeInstanceLocation">
            The location relative to <paramref name="baseInstanceLocation"/> within the instance that
            is being evaluated.
            </param>
            <param name="context">The evaluation context.</param>
            <returns>A schema constraint.</returns>
            <remarks>
            The constraint returned by this method is cached by the <see cref="T:Json.Schema.JsonSchema"/> object.
            Different evaluation paths to this schema object may result in different constraints, so
            a new constraint is saved for each dynamic scope.
            </remarks>
        </member>
        <member name="M:Json.Schema.JsonSchema.GetAnchor(System.String)">
            <summary>
            Gets a defined anchor.
            </summary>
            <param name="anchorName">The name of the anchor (excluding the `#`)</param>
            <returns>The associated subschema, if the anchor exists, or null.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchema.op_Implicit(System.Boolean)~Json.Schema.JsonSchema">
            <summary>
            Implicitly converts a boolean value into one of the boolean schemas. 
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="T:Json.Schema.SchemaJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.JsonSchema"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.SchemaJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.JsonSchema,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.JsonSchemaBuilder">
            <summary>
            A fluent-style builder for <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.Add(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Adds a new keyword.
            </summary>
            <param name="keyword">The keyword to add.</param>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.Get``1">
            <summary>
            Gets a keyword if one has been added.
            </summary>
            <typeparam name="T">the keyword type.</typeparam>
            <returns>The keyword, if it exists; `null` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.RefRoot">
            <summary>
            Creates a new <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
            <returns>A JSON Schema that simply refers back to the root schema.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.RecursiveRefRoot">
            <summary>
            Creates a new <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
            <returns>A JSON Schema that simply refers back to the recursive root schema.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.Build">
            <summary>
            Builds the schema.
            </summary>
            <returns>A <see cref="T:Json.Schema.JsonSchema"/>.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilder.op_Implicit(Json.Schema.JsonSchemaBuilder)~Json.Schema.JsonSchema">
            <summary>
            For convenience, implicitly calls <see cref="M:Json.Schema.JsonSchemaBuilder.Build"/>.
            </summary>
            <returns>A <see cref="T:Json.Schema.JsonSchema"/>.</returns>
        </member>
        <member name="T:Json.Schema.JsonSchemaBuilderExtensions">
            <summary>
            Provides a fluent interface for <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AdditionalItems(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `additionalItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `additionalItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AdditionalProperties(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `additionalProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `additionalProperties`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AllOf(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add an `allOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `allOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AllOf(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add an `allOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `allOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Anchor(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add an `$anchor` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The anchor reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AnyOf(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add an `anyOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `anyOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.AnyOf(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add an `anyOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `anyOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Comment(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$comment` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="comment">The comment.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Const(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Add a `const` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="node">The constant value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Contains(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `contains` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `contains`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Default(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Add a `default` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="node">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Definitions(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `definitions` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Definitions(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `definitions` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Defs(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `$defs` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Defs(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `$defs` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="defs">The schema definition map.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Dependencies(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.SchemaOrPropertyList})">
            <summary>
            Add a `dependencies` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Dependencies(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.SchemaOrPropertyList}[])">
            <summary>
            Add a `dependencies` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentRequired(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
            Add a `dependentRequired` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentRequired(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,System.Collections.Generic.IEnumerable{System.String}}[])">
            <summary>
            Add a `dependentRequired` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentSchemas(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `dependentSchemas` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DependentSchemas(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `dependentSchemas` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deps">The dependencies.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Deprecated(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `deprecated` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="deprecated">Whether the schema is deprecated.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Description(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `description` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="description">The description.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DynamicAnchor(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add an `$dynamicAnchor` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The anchor reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DynamicRef(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$dynamicRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.DynamicRef(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$dynamicRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Else(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `else` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `else`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Enum(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Add an `enum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The values for the enum.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Enum(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Add an `enum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The values for the enum.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Enum(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add an `enum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The values for the enum.</param>
            <returns>The builder.</returns>
            <remarks>
            This overload is provided as a convenience as string-only enums are most common.
            </remarks>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Examples(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.Text.Json.Nodes.JsonNode})">
            <summary>
            Add an `examples` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The example values.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Examples(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode[])">
            <summary>
            Add an `examples` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="elements">The example values.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.ExclusiveMaximum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add an `exclusiveMaximum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="max">The max value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.ExclusiveMinimum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add an `exclusiveMinimum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="min">The min value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Format(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `format` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">The format.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Format(Json.Schema.JsonSchemaBuilder,Json.Schema.Format)">
            <summary>
            Add a `format` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">The format.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Id(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add an `$id` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="id">The ID.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Id(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add an `$id` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="id">The ID.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.If(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `if` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `if`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Items(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a single-schema `items` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `items`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Items(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add a schema-array `items` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `items`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxContains(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxContains` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max number of expected matches.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Maximum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add a `maximum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxItems(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max number of expected items.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxLength(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxLength` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max string length.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MaxProperties(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `maxProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The max number of expected properties.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinContains(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minContains` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min number of expected matches.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Minimum(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add a `minimum` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinItems(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min number of expected items.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinLength(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minLength` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min string length.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MinProperties(Json.Schema.JsonSchemaBuilder,System.UInt32)">
            <summary>
            Add a `minProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The min number of expected properties.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.MultipleOf(Json.Schema.JsonSchemaBuilder,System.Decimal)">
            <summary>
            Add a `multipleOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The divisor.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Not(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a `not` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `not`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.OneOf(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add a `oneOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schema for `oneOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.OneOf(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add a `oneOf` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `oneOf`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Pattern(Json.Schema.JsonSchemaBuilder,System.Text.RegularExpressions.Regex)">
            <summary>
            Add a `pattern` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="pattern">The pattern to match.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Pattern(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `pattern` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="pattern">The pattern to match.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.Text.RegularExpressions.Regex,Json.Schema.JsonSchema})">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.Text.RegularExpressions.Regex,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PatternProperties(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `patternProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PrefixItems(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema[])">
            <summary>
            Add a `prefixItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `prefixItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PrefixItems(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Add a `prefixItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schemas">The schemas for `prefixItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Properties(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Add a `properties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Properties(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Add a `properties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="props">The property schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PropertyDependencies(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.PropertyDependency})">
            <summary>
            Adds a `propertyDependencies` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="dependencies">The property dependency schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PropertyDependencies(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,Json.Schema.PropertyDependency}[])">
            <summary>
            Adds a `propertyDependencies` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="dependencies">The property dependency schemas.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.PropertyNames(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a `propertyNames` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `propertyNames`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.ReadOnly(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `readOnly` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">Whether the instance is read-only.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.RecursiveAnchor(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `$recursiveAnchor` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
            <remarks>
            Per Draft 2019-09, the value must always be `true`.  This is implied for this method.
            </remarks>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.RecursiveRef(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$recursiveRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.RecursiveRef(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$recursiveRef` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Ref(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$ref` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Ref(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$ref` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="reference">The URI reference.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Required(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a `required` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="properties">The required property collections.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Required(Json.Schema.JsonSchemaBuilder,System.String[])">
            <summary>
            Add a `required` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="properties">The required property collections.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Schema(Json.Schema.JsonSchemaBuilder,System.Uri)">
            <summary>
            Add a `$schema` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="uri">The uri of the meta-schema.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Schema(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `$schema` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="uri">The uri of the meta-schema.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Then(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add a `then` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `then`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Title(Json.Schema.JsonSchemaBuilder,System.String)">
            <summary>
            Add a `title` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="title">The title.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Type(Json.Schema.JsonSchemaBuilder,Json.Schema.SchemaValueType)">
            <summary>
            Add a `type` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="type">The type.  Can be combined with the bit-wise OR operator `|`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Type(Json.Schema.JsonSchemaBuilder,Json.Schema.SchemaValueType[])">
            <summary>
            Add a `type` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="types">The types.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Type(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IEnumerable{Json.Schema.SchemaValueType})">
            <summary>
            Add a `type` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="types">The types.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.UnevaluatedItems(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `unevaluatedItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `unevaluatedItems`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.UnevaluatedProperties(Json.Schema.JsonSchemaBuilder,Json.Schema.JsonSchema)">
            <summary>
            Add an `unevaluatedProperties` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="schema">The schema for `unevaluatedProperties`.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.UniqueItems(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `uniqueItems` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">Whether to expect a unique item set.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Unrecognized(Json.Schema.JsonSchemaBuilder,System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Adds a keyword that's not recognized by any vocabulary - extra data - to the schema.
            </summary>
            <param name="builder">The builder.</param>
            <param name="name">The keyword name.</param>
            <param name="value">The value.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.Uri,System.Boolean}[])">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.ValueTuple{System.String,System.Boolean}[])">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.Uri,System.Boolean})">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Vocabulary(Json.Schema.JsonSchemaBuilder,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Boolean})">
            <summary>
            Add an `$vocabulary` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="vocabs">The vocabulary callouts.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.WriteOnly(Json.Schema.JsonSchemaBuilder,System.Boolean)">
            <summary>
            Add a `writeOnly` keyword.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">Whether the instance is write-only.</param>
            <returns>The builder.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Evaluate(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)">
            <summary>
            Convenience method that builds and evaluates with a single call.
            </summary>
            <param name="builder">The builder.</param>
            <param name="root">The root instance.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaBuilderExtensions.Validate(Json.Schema.JsonSchemaBuilder,System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)">
            <summary>
            Convenience method that builds and evaluates with a single call.
            </summary>
            <param name="builder">The builder.</param>
            <param name="root">The root instance.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="T:Json.Schema.JsonSchemaException">
            <summary>
            Thrown when a schema is invalid or cannot be processed with the current configuration.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Json.Schema.JsonSchemaException"/> type.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Json.Schema.JsonSchemaExtensions">
            <summary>
            Some extensions for <see cref="T:Json.Schema.JsonSchema"/>
            </summary>
            <summary>
            Some extensions for <see cref="T:Json.Schema.JsonSchema"/>
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Evaluate(Json.Schema.JsonSchema,System.Text.Json.JsonDocument,Json.Schema.EvaluationOptions)">
            <summary>
            Extends <see cref="M:Json.Schema.JsonSchema.Evaluate(System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)"/> to take <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <param name="jsonSchema">The schema.</param>
            <param name="jsonDocument">Instance to be evaluated.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Evaluate(Json.Schema.JsonSchema,System.Text.Json.JsonElement,Json.Schema.EvaluationOptions)">
            <summary>
            Extends <see cref="M:Json.Schema.JsonSchema.Evaluate(System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)"/> to take <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="jsonSchema">The schema.</param>
            <param name="jsonElement">Instance to be evaluated.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Validate(Json.Schema.JsonSchema,System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)">
            <summary>
            Extends <see cref="M:Json.Schema.JsonSchema.Evaluate(System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)"/> to take <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <param name="jsonSchema">The schema.</param>
            <param name="jsonNode">Instance to be evaluated.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Validate(Json.Schema.JsonSchema,System.Text.Json.JsonDocument,Json.Schema.EvaluationOptions)">
            <summary>
            Extends <see cref="M:Json.Schema.JsonSchema.Evaluate(System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)"/> to take <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <param name="jsonSchema">The schema.</param>
            <param name="jsonDocument">Instance to be evaluated.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Validate(Json.Schema.JsonSchema,System.Text.Json.JsonElement,Json.Schema.EvaluationOptions)">
            <summary>
            Extends <see cref="M:Json.Schema.JsonSchema.Evaluate(System.Text.Json.Nodes.JsonNode,Json.Schema.EvaluationOptions)"/> to take <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="jsonSchema">The schema.</param>
            <param name="jsonElement">Instance to be evaluated.</param>
            <param name="options">The options to use for this evaluation.</param>
            <returns>A <see cref="T:Json.Schema.EvaluationResults"/> that provides the outcome of the evaluation.</returns>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.Bundle(Json.Schema.JsonSchema,Json.Schema.EvaluationOptions)">
            <summary>
            Generates a bundle schema that contains all of the externally referenced schemas
            in a single document.
            </summary>
            <param name="jsonSchema">The root schema.</param>
            <param name="options">Options (used for the schema registry)</param>
            <returns>A JSON Schema with all referenced schemas.</returns>
            <exception cref="T:Json.Schema.JsonSchemaException">Thrown if a reference cannot be resolved.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if a reference resolves to a non-JSON-Schema document.</exception>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetAdditionalItems(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `additionalItems` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetAdditionalProperties(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `additionalProperties` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetAllOf(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `allOf` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetAnchor(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$anchor` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetAnyOf(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `anyOf` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetComment(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$comment` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetConst(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `const` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetContains(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `contains` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetContentEncoding(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `contentEncoding` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetContentMediaType(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `contentMediaType` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetContentSchema(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `contentSchema` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDefault(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `default` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDefinitions(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `definitions` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDefs(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `$defs` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDependencies(Json.Schema.JsonSchema)">
            <summary>
            Gets the requirements in `dependencies` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDependentRequired(Json.Schema.JsonSchema)">
            <summary>
            Gets the requirements in `dependentRequired` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDependentSchemas(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `dependentSchemas` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDeprecated(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `deprecated` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDescription(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `description` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDynamicAnchor(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$dynamicAnchor` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetDynamicRef(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$dynamicRef` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetElse(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `else` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetEnum(Json.Schema.JsonSchema)">
            <summary>
            Gets the values in `enum` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetExamples(Json.Schema.JsonSchema)">
            <summary>
            Gets the values in `examples` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetExclusiveMaximum(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `exclusiveMaximum` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetExclusiveMinimum(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `exclusiveMinimum` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetFormat(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `format` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetId(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$id` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetIf(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `if` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetItems(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `items` if the keyword exists and is a single schema.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetItemsArrayForm(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `items` if the keyword exists and is an array of schemas.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMaxContains(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `maxContains` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMaximum(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `maximum` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMaxItems(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `maxItems` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMaxLength(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `maxLength` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMaxProperties(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `maxProperties` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMinContains(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `minContains` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMinimum(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `minimum` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMinItems(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `minItems` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMinLength(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `minLength` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMinProperties(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `minProperties` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetMultipleOf(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `multipleOf` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetNot(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `not` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetOneOf(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `oneOf` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetPattern(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `pattern` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetPatternProperties(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `patternProperties` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetPrefixItems(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `prefixItems` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetProperties(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas in `properties` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetPropertyDependencies(Json.Schema.JsonSchema)">
            <summary>
            Gets the schemas for `propertyDependencies` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetPropertyNames(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `propertyNames` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetReadOnly(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `readOnly` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetRecursiveAnchor(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$recursiveAnchor` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetRecursiveRef(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$recursiveRef` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetRef(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$ref` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetRequired(Json.Schema.JsonSchema)">
            <summary>
            Gets the values in `required` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetSchema(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `$schema` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetThen(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `then` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetTitle(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `title` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetJsonType(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `type` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetUnevaluatedItems(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `unevaluatedItems` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetUnevaluatedProperties(Json.Schema.JsonSchema)">
            <summary>
            Gets the schema for `unevaluatedProperties` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetUniqueItems(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `uniqueItems` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetVocabulary(Json.Schema.JsonSchema)">
            <summary>
            Gets the values in `$vocabulary` if the keyword exists.
            </summary>
        </member>
        <member name="M:Json.Schema.JsonSchemaExtensions.GetWriteOnly(Json.Schema.JsonSchema)">
            <summary>
            Gets the value of `writeOnly` if the keyword exists.
            </summary>
        </member>
        <member name="T:Json.Schema.KeywordConstraint">
            <summary>
            Describes the constraint applied by a single keyword.
            </summary>
            <remarks>
            This represents any work that can be performed as part of static analysis of the schema.
            </remarks>
        </member>
        <member name="P:Json.Schema.KeywordConstraint.Skip">
            <summary>
            Gets a no-op constraint.  Use for keywords that have no assertion or annotation behavior, e.g. `$defs`.
            </summary>
        </member>
        <member name="P:Json.Schema.KeywordConstraint.Keyword">
            <summary>
            The keyword name.
            </summary>
        </member>
        <member name="P:Json.Schema.KeywordConstraint.Evaluator">
            <summary>
            A method that used to apply the actual constraint behavior.
            </summary>
            <remarks>
            This method takes a <see cref="T:Json.Schema.KeywordEvaluation"/> which contains the local instance being evaluated
            and the local results object.
            </remarks>
        </member>
        <member name="P:Json.Schema.KeywordConstraint.SiblingDependencies">
            <summary>
            Gets or sets the collection of keyword constraints (i.e. sibling keywords) that this keyword is dependent upon.
            The evaluations of these constraints will be available when this keyword is evaluated.
            </summary>
        </member>
        <member name="P:Json.Schema.KeywordConstraint.ChildDependencies">
            <summary>
            Gets or sets the collection of schema constraints (i.e. subschemas) that this keyword is dependent upon.
            The evaluations of these constraints will be available when this keyword is evaluated.
            </summary>
        </member>
        <member name="M:Json.Schema.KeywordConstraint.#ctor(System.String,System.Action{Json.Schema.KeywordEvaluation,Json.Schema.EvaluationContext})">
            <summary>
            Creates a new keyword constraint.
            </summary>
            <param name="keyword">The keyword name.</param>
            <param name="evaluator">A method that used to apply the actual constraint behavior.</param>
        </member>
        <member name="M:Json.Schema.KeywordConstraint.SimpleAnnotation(System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a keyword constraint that simply applies an annotation.
            </summary>
            <param name="keyword">The keyword name.</param>
            <param name="value">The annotation value.</param>
            <returns>A new keyword constraint.</returns>
        </member>
        <member name="T:Json.Schema.KeywordEvaluation">
            <summary>
            Represents any evaluation-time work (i.e. any work that requires the instance) for keywords.
            </summary>
        </member>
        <member name="P:Json.Schema.KeywordEvaluation.LocalInstance">
            <summary>
            Gets the local instance to be evaluated.
            </summary>
        </member>
        <member name="P:Json.Schema.KeywordEvaluation.Results">
            <summary>
            Gets the local results object.
            </summary>
        </member>
        <member name="P:Json.Schema.KeywordEvaluation.SiblingEvaluations">
            <summary>
            Gets any sibling evaluations for this keyword.
            </summary>
            <remarks>
            These evaluations are sourced from the associated constraint's <see cref="P:Json.Schema.KeywordConstraint.SiblingDependencies"/>.
            </remarks>
        </member>
        <member name="P:Json.Schema.KeywordEvaluation.ChildEvaluations">
             <summary>
             Gets any child evaluations for this keyword.
             </summary>
             <remarks>
             These evaluations are sourced from the associated constraint's <see cref="P:Json.Schema.KeywordConstraint.ChildDependencies"/>.
            
             This property is publicly settable as some keywords cannot define child constraints until the instance is available.
             </remarks>
        </member>
        <member name="M:Json.Schema.KeywordEvaluation.MarkAsSkipped">
            <summary>
            Indicates that the evaluation should be skipped and no work is to be done,
            e.g. `then` is skipped when `if` fails validation.
            </summary>
        </member>
        <member name="T:Json.Schema.KeywordExtensions">
            <summary>
            Some extensions for <see cref="T:Json.Schema.IJsonSchemaKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.Keyword(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Gets the keyword string.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>The keyword string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The keyword does not carry the <see cref="T:Json.Schema.SchemaKeywordAttribute"/>.</exception>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.Keyword(System.Type)">
            <summary>
            Gets the keyword string.
            </summary>
            <param name="keywordType">The keyword type.</param>
            <returns>The keyword string.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keywordType"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The keyword does not carry the <see cref="T:Json.Schema.SchemaKeywordAttribute"/>.</exception>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.Priority(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Gets the keyword priority.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>The priority.</returns>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.SupportsVersion(Json.Schema.IJsonSchemaKeyword,Json.Schema.SpecVersion)">
            <summary>
            Determines if a keyword is declared by a given version of the JSON Schema specification.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="version">The queried version.</param>
            <returns>true if the keyword is supported by the version; false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the keyword has no <see cref="T:Json.Schema.SchemaSpecVersionAttribute"/> declarations.</exception>
        </member>
        <member name="M:Json.Schema.KeywordExtensions.VersionsSupported(Json.Schema.IJsonSchemaKeyword)">
            <summary>
            Gets the specification versions supported by a keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>The specification versions as a single flags value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the keyword has no <see cref="T:Json.Schema.SchemaSpecVersionAttribute"/> declarations.</exception>
        </member>
        <member name="T:Json.Schema.MaxContainsKeyword">
            <summary>
            Handles `maxContains`.
            </summary>
        </member>
        <member name="F:Json.Schema.MaxContainsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxContainsKeyword.Value">
            <summary>
            The maximum expected matching items.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxContainsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxContainsKeyword"/>.
            </summary>
            <param name="value">The maximum expected matching items.</param>
        </member>
        <member name="M:Json.Schema.MaxContainsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MaxContainsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MaxContainsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxContainsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MaxContainsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MaxContainsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MaxContainsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MaximumKeyword">
            <summary>
            Handles `maximum`.
            </summary>
        </member>
        <member name="F:Json.Schema.MaximumKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MaximumKeyword.Value">
            <summary>
            The maximum expected value.
            </summary>
        </member>
        <member name="M:Json.Schema.MaximumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaximumKeyword"/>.
            </summary>
            <param name="value">The maximum expected value.</param>
        </member>
        <member name="M:Json.Schema.MaximumKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MaximumKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MaximumKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MaximumKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MaximumKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MaximumKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MaximumKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MaxItemsKeyword">
            <summary>
            Handles `maxItems`.
            </summary>
        </member>
        <member name="F:Json.Schema.MaxItemsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxItemsKeyword.Value">
            <summary>
            The expected maximum number of items.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxItemsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxItemsKeyword"/>.
            </summary>
            <param name="value">The expected maximum number of items.</param>
        </member>
        <member name="M:Json.Schema.MaxItemsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MaxItemsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MaxItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxItemsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MaxItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MaxItemsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MaxItemsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MaxLengthKeyword">
            <summary>
            Handles `maxLength`.
            </summary>
        </member>
        <member name="F:Json.Schema.MaxLengthKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxLengthKeyword.Value">
            <summary>
            The maximum expected string length.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxLengthKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxLengthKeyword"/>.
            </summary>
            <param name="value">The maximum expected string length.</param>
        </member>
        <member name="M:Json.Schema.MaxLengthKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MaxLengthKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MaxLengthKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxLengthKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MaxLengthKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MaxLengthKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MaxLengthKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MaxPropertiesKeyword">
            <summary>
            Handles `maxProperties`.
            </summary>
        </member>
        <member name="F:Json.Schema.MaxPropertiesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MaxPropertiesKeyword.Value">
            <summary>
            The maximum expected number of properties.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MaxPropertiesKeyword"/>.
            </summary>
            <param name="value">The maximum expected number of properties.</param>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MaxPropertiesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MaxPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MaxPropertiesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MaxPropertiesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MaxPropertiesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MetaSchemas">
            <summary>
            Exposes the meta-schemas for the supported drafts.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft201909Id">
            <summary>
            The Draft 2019-09 meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core201909Id">
            <summary>
            The Draft 2019-09 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator201909Id">
            <summary>
            The Draft 2019-09 Applicator meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation201909Id">
            <summary>
            The Draft 2019-09 Validation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata201909Id">
            <summary>
            The Draft 2019-09 Metadata meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Format201909Id">
            <summary>
            The Draft 2019-09 Format meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content201909Id">
            <summary>
            The Draft 2019-09 Content meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft201909">
            <summary>
            The Draft 2019-09 meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core201909">
            <summary>
            The Draft 2019-09 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator201909">
            <summary>
            The Draft 2019-09 Applicator meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation201909">
            <summary>
            The Draft 2019-09 Validation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata201909">
            <summary>
            The Draft 2019-09 Metadata meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Format201909">
            <summary>
            The Draft 2019-09 Format meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content201909">
            <summary>
            The Draft 2019-09 Content meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft202012Id">
            <summary>
            The Draft 2020-12 meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core202012Id">
            <summary>
            The Draft 2020-12 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Unevaluated202012Id">
            <summary>
            The Draft 2020-12 Unevaluated meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator202012Id">
            <summary>
            The Draft 2020-12 Applicator meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation202012Id">
            <summary>
            The Draft 2020-12 Validation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata202012Id">
            <summary>
            The Draft 2020-12 Metadata meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAnnotation202012Id">
            <summary>
            The Draft 2020-12 Format-Annotation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAssertion202012Id">
            <summary>
            The Draft 2020-12 Format-Assertion meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content202012Id">
            <summary>
            The Draft 2020-12 Content meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft202012">
            <summary>
            The Draft 2020-12 meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Core202012">
            <summary>
            The Draft 2020-12 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Unevaluated202012">
            <summary>
            The Draft 2020-12 Unevaluated meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Applicator202012">
            <summary>
            The Draft 2020-12 Applicator meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Validation202012">
            <summary>
            The Draft 2020-12 Validation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Metadata202012">
            <summary>
            The Draft 2020-12 Metadata meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAnnotation202012">
            <summary>
            The Draft 2020-12 Format-Annotation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAssertion202012">
            <summary>
            The Draft 2020-12 Format-Assertion meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Content202012">
            <summary>
            The Draft 2020-12 Content meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft6Id">
            <summary>
            The Draft 6 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft6">
            <summary>
            The Draft 6 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft7Id">
            <summary>
            The Draft 7 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.Draft7">
            <summary>
            The Draft 7 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.DraftNextId">
            <summary>
            The Draft 2020-12 meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.CoreNextId">
            <summary>
            The Draft 2020-12 Core meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.UnevaluatedNextId">
            <summary>
            The Draft 2020-12 Unevaluated meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.ApplicatorNextId">
            <summary>
            The Draft 2020-12 Applicator meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.ValidationNextId">
            <summary>
            The Draft 2020-12 Validation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.MetadataNextId">
            <summary>
            The Draft 2020-12 Metadata meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAnnotationNextId">
            <summary>
            The Draft 2020-12 Format-Annotation meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAssertionNextId">
            <summary>
            The Draft 2020-12 Format-Assertion meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.ContentNextId">
            <summary>
            The Draft 2020-12 Content meta-schema ID.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.DraftNext">
            <summary>
            The Draft 2020-12 meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.CoreNext">
            <summary>
            The Draft 2020-12 Core meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.UnevaluatedNext">
            <summary>
            The Draft 2020-12 Unevaluated meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.ApplicatorNext">
            <summary>
            The Draft 2020-12 Applicator meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.ValidationNext">
            <summary>
            The Draft 2020-12 Validation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.MetadataNext">
            <summary>
            The Draft 2020-12 Metadata meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAnnotationNext">
            <summary>
            The Draft 2020-12 Format-Annotation meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.FormatAssertionNext">
            <summary>
            The Draft 2020-12 Format-Assertion meta-schema.
            </summary>
        </member>
        <member name="F:Json.Schema.MetaSchemas.ContentNext">
            <summary>
            The Draft 2020-12 Content meta-schema.
            </summary>
        </member>
        <member name="T:Json.Schema.MinContainsKeyword">
            <summary>
            Handles `minContains`.
            </summary>
        </member>
        <member name="F:Json.Schema.MinContainsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MinContainsKeyword.Value">
            <summary>
            The minimum expected matching items.
            </summary>
        </member>
        <member name="M:Json.Schema.MinContainsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinContainsKeyword"/>.
            </summary>
            <param name="value">The minimum expected matching items.</param>
        </member>
        <member name="M:Json.Schema.MinContainsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MinContainsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MinContainsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MinContainsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MinContainsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MinContainsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MinContainsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MinimumKeyword">
            <summary>
            Handles `minimum`.
            </summary>
        </member>
        <member name="F:Json.Schema.MinimumKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MinimumKeyword.Value">
            <summary>
            The minimum expected value.
            </summary>
        </member>
        <member name="M:Json.Schema.MinimumKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinimumKeyword"/>.
            </summary>
            <param name="value">The minimum expected value.</param>
        </member>
        <member name="M:Json.Schema.MinimumKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MinimumKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MinItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MinimumKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MinItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MinimumKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MinimumKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MinItemsKeyword">
            <summary>
            Handles `minItems`.
            </summary>
        </member>
        <member name="F:Json.Schema.MinItemsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MinItemsKeyword.Value">
            <summary>
            The expected minimum number of items.
            </summary>
        </member>
        <member name="M:Json.Schema.MinItemsKeyword.#ctor(System.UInt32)">
            <summary>
            Create a new <see cref="T:Json.Schema.MinItemsKeyword"/>.
            </summary>
            <param name="value">The expected minimum number of items.</param>
        </member>
        <member name="M:Json.Schema.MinItemsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MinItemsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MinItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MinItemsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MinItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MinItemsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MinItemsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MinLengthKeyword">
            <summary>
            Handles `minLength`.
            </summary>
        </member>
        <member name="F:Json.Schema.MinLengthKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MinLengthKeyword.Value">
            <summary>
            The minimum expected string length.
            </summary>
        </member>
        <member name="M:Json.Schema.MinLengthKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinLengthKeyword"/>.
            </summary>
            <param name="value">The minimum expected string length.</param>
        </member>
        <member name="M:Json.Schema.MinLengthKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MinLengthKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MinLengthKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MinLengthKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MinLengthKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MinLengthKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MinLengthKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MinPropertiesKeyword">
            <summary>
            Handles `minProperties`.
            </summary>
        </member>
        <member name="F:Json.Schema.MinPropertiesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MinPropertiesKeyword.Value">
            <summary>
            The minimum expected number of properties.
            </summary>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeyword.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MinPropertiesKeyword"/>.
            </summary>
            <param name="value">The minimum expected number of properties.</param>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MinPropertiesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MinPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MinPropertiesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MinPropertiesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MinPropertiesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.MultipleOfKeyword">
            <summary>
            Handles `multipleOf`.
            </summary>
        </member>
        <member name="F:Json.Schema.MultipleOfKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.MultipleOfKeyword.Value">
            <summary>
            The expected divisor of a value.
            </summary>
        </member>
        <member name="M:Json.Schema.MultipleOfKeyword.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.MultipleOfKeyword"/>.
            </summary>
            <param name="value">The expected divisor of a value.</param>
        </member>
        <member name="M:Json.Schema.MultipleOfKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.MultipleOfKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.MultipleOfKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.MultipleOfKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.MultipleOfKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.MultipleOfKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.MultipleOfKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.NotKeyword">
            <summary>
            Handles `not`.
            </summary>
        </member>
        <member name="F:Json.Schema.NotKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.NotKeyword.Schema">
            <summary>
            The schema to not match.
            </summary>
        </member>
        <member name="M:Json.Schema.NotKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.NotKeyword"/>.
            </summary>
            <param name="value">The schema to not match.</param>
        </member>
        <member name="M:Json.Schema.NotKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.NotKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.NotKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.NotKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.NotKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.NotKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.NotKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.OneOfKeyword">
            <summary>
            Handles `oneOf`.
            </summary>
        </member>
        <member name="F:Json.Schema.OneOfKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.OneOfKeyword.Schemas">
            <summary>
            The keywords schema collection.
            </summary>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.OneOfKeyword"/>.
            </summary>
            <param name="values">The keywords schema collection.</param>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.OneOfKeyword"/>.
            </summary>
            <param name="values">The keywords schema collection.</param>
        </member>
        <member name="M:Json.Schema.OneOfKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.OneOfKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.OneOfKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.OneOfKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.OneOfKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.OneOfKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.OneOfKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.OutputFormat">
            <summary>
            Enumerates the available output formats.
            </summary>
        </member>
        <member name="F:Json.Schema.OutputFormat.Flag">
            <summary>
            Indicates that only a single pass/fail node will be returned.
            </summary>
        </member>
        <member name="F:Json.Schema.OutputFormat.List">
            <summary>
            Indicates that all nodes will be listed as children of the top node.
            </summary>
        </member>
        <member name="F:Json.Schema.OutputFormat.Hierarchical">
            <summary>
            Indicates that nodes will match the structure of the schema.
            </summary>
        </member>
        <member name="T:Json.Schema.PatternKeyword">
            <summary>
            Handles `pattern`.
            </summary>
        </member>
        <member name="F:Json.Schema.PatternKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternKeyword.Value">
            <summary>
            The regular expression.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternKeyword.InvalidPattern">
            <summary>
            If the pattern is invalid or unsupported by <see cref="T:System.Text.RegularExpressions.Regex"/>, it will appear here.
            </summary>
            <remarks>
            All validations will fail if this is populated.
            </remarks>
        </member>
        <member name="M:Json.Schema.PatternKeyword.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new <see cref="T:Json.Schema.PatternKeyword"/>.
            </summary>
            <param name="value">The regular expression.</param>
        </member>
        <member name="M:Json.Schema.PatternKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.PatternKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.PatternKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.PatternKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.PatternKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.PatternKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.PatternKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.PatternPropertiesKeyword">
            <summary>
            Handles `patternProperties`.
            </summary>
        </member>
        <member name="F:Json.Schema.PatternPropertiesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternPropertiesKeyword.Patterns">
            <summary>
            The pattern-keyed schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.PatternPropertiesKeyword.InvalidPatterns">
            <summary>
            If any pattern is invalid or unsupported by <see cref="T:System.Text.RegularExpressions.Regex"/>, it will appear here.
            </summary>
            <remarks>
            All validations will fail if this is populated.
            </remarks>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Text.RegularExpressions.Regex,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PatternPropertiesKeyword"/>.
            </summary>
            <param name="values">The pattern-keyed schemas.</param>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.PatternPropertiesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.PatternPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.PatternPropertiesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.PatternPropertiesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.PatternPropertiesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.PredicateFormat">
            <summary>
            A <see cref="T:Json.Schema.Format"/> that uses a predicate for evaluation.
            </summary>
        </member>
        <member name="T:Json.Schema.PredicateFormat.PredicateWithErrorMessage">
            <summary>
            A predicate that also supplies an `out` error message parameter.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="M:Json.Schema.PredicateFormat.#ctor(System.String,System.Func{System.Text.Json.Nodes.JsonNode,System.Boolean})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PredicateFormat"/>.
            </summary>
            <param name="key">The format key.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Json.Schema.PredicateFormat.#ctor(System.String,Json.Schema.PredicateFormat.PredicateWithErrorMessage)">
            <summary>
            Creates a new <see cref="T:Json.Schema.PredicateFormat"/>.
            </summary>
            <param name="key">The format key.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Json.Schema.PredicateFormat.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="element">The element to validate.</param>
            <param name="errorMessage"></param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="T:Json.Schema.PrefixItemsKeyword">
            <summary>
            Handles `items`.
            </summary>
        </member>
        <member name="F:Json.Schema.PrefixItemsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.PrefixItemsKeyword.ArraySchemas">
            <summary>
            The collection of schemas for the "schema array" form.
            </summary>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.#ctor(Json.Schema.JsonSchema[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.PrefixItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
            <remarks>
            Using the `params` constructor to build an array-form `items` keyword with a single schema
            will confuse the compiler.  To achieve this, you'll need to explicitly specify the array.
            </remarks>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PrefixItemsKeyword"/>.
            </summary>
            <param name="values">The collection of schemas for the "schema array" form.</param>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.PrefixItemsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.PrefixItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.PrefixItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.PrefixItemsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.PrefixItemsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.PropertiesKeyword">
            <summary>
            Handles `properties`.
            </summary>
        </member>
        <member name="F:Json.Schema.PropertiesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.PropertiesKeyword.Properties">
            <summary>
            The property schemas.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertiesKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new <see cref="T:Json.Schema.PropertiesKeyword"/>.
            </summary>
            <param name="values">The property schemas.</param>
        </member>
        <member name="M:Json.Schema.PropertiesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.PropertiesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.PropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertiesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.PropertiesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.PropertiesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.PropertiesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.PropertyDependenciesKeyword">
            <summary>
            Handles the `propertyDependencies` keyword.
            </summary>
        </member>
        <member name="F:Json.Schema.PropertyDependenciesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.PropertyDependenciesKeyword.Dependencies">
            <summary>
            Gets the collection of dependencies.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertyDependenciesKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.PropertyDependency})">
            <summary>
            Creates a new instance of the <see cref="T:Json.Schema.PropertyDependenciesKeyword"/>.
            </summary>
            <param name="dependencies">The collection of dependencies.</param>
        </member>
        <member name="M:Json.Schema.PropertyDependenciesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.PropertyDependenciesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.PropertyDependenciesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertyDependenciesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.PropertyDependenciesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.PropertyDependenciesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.PropertyDependenciesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.PropertyDependency">
            <summary>
            Represents a single entry in the `propertyDependencies` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.PropertyDependency.Schemas">
            <summary>
            Gets the collection of value-dependent schemas for this property.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertyDependency.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Json.Schema.JsonSchema})">
            <summary>
            Creates a new instance of <see cref="T:Json.Schema.PropertyDependency"/>.
            </summary>
            <param name="schemas">The collection of value-dependent schemas for this property</param>
        </member>
        <member name="M:Json.Schema.PropertyDependency.#ctor(System.ValueTuple{System.String,Json.Schema.JsonSchema}[])">
            <summary>
            Creates a new instance of <see cref="T:Json.Schema.PropertyDependency"/>.
            </summary>
            <param name="schemas">The collection of value-dependent schemas for this property</param>
        </member>
        <member name="M:Json.Schema.PropertyDependency.Equals(Json.Schema.PropertyDependency)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PropertyDependency.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Json.Schema.PropertyDependency.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Json.Schema.PropertyDependency.op_Implicit(System.Collections.Generic.Dictionary{System.String,Json.Schema.JsonSchema})~Json.Schema.PropertyDependency">
            <summary>
            Implicitly converts a keyed collection of <see cref="T:Json.Schema.JsonSchema"/> to a property dependency.
            </summary>
            <param name="dependency"></param>
        </member>
        <member name="M:Json.Schema.PropertyDependency.op_Implicit(System.ValueTuple{System.String,Json.Schema.JsonSchema}[])~Json.Schema.PropertyDependency">
            <summary>
            Implicitly converts a keyed collection of <see cref="T:Json.Schema.JsonSchema"/> to a property dependency.
            </summary>
            <param name="dependency"></param>
        </member>
        <member name="M:Json.Schema.PropertyDependency.op_Implicit(System.ValueTuple{System.String,Json.Schema.JsonSchemaBuilder}[])~Json.Schema.PropertyDependency">
            <summary>
            Implicitly converts a keyed collection of <see cref="T:Json.Schema.JsonSchema"/> to a property dependency.
            </summary>
            <param name="dependency"></param>
        </member>
        <member name="T:Json.Schema.PropertyDependencyJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.PropertyDependency"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertyDependencyJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.PropertyDependency"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.PropertyDependencyJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.PropertyDependency,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.PropertyNamesKeyword">
            <summary>
            Handles `propertyNames`.
            </summary>
        </member>
        <member name="F:Json.Schema.PropertyNamesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.PropertyNamesKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.PropertyNamesKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.PropertyNamesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.PropertyNamesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.PropertyNamesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.PropertyNamesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.PropertyNamesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.ReadOnlyKeyword">
            <summary>
            Handles `readOnly`.
            </summary>
        </member>
        <member name="F:Json.Schema.ReadOnlyKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ReadOnlyKeyword.Value">
            <summary>
            Whether the instance is read-only.
            </summary>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ReadOnlyKeyword"/>.
            </summary>
            <param name="value">Whether the instance is read-only.</param>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ReadOnlyKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ReadOnlyKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ReadOnlyKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ReadOnlyKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ReadOnlyKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.RecursiveAnchorKeyword">
            <summary>
            Handles `$recursiveAnchor`.
            </summary>
        </member>
        <member name="F:Json.Schema.RecursiveAnchorKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.RecursiveAnchorKeyword.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RecursiveAnchorKeyword"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.RecursiveAnchorKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.RecursiveAnchorKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.RecursiveAnchorKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.RecursiveAnchorKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.RecursiveAnchorKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.RecursiveRefKeyword">
            <summary>
            Handles `$recursiveRef`.
            </summary>
        </member>
        <member name="F:Json.Schema.RecursiveRefKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.RecursiveRefKeyword.Reference">
            <summary>
            The URI reference.
            </summary>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RecursiveRefKeyword"/>.
            </summary>
            <param name="value">The URI.</param>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.RecursiveRefKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.RecursiveRefKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.RecursiveRefKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.RecursiveRefKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.RecursiveRefKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.RefKeyword">
            <summary>
            Handles `$ref`.
            </summary>
        </member>
        <member name="F:Json.Schema.RefKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.RefKeyword.Reference">
            <summary>
            The URI reference.
            </summary>
        </member>
        <member name="M:Json.Schema.RefKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RefKeyword"/>.
            </summary>
            <param name="value">The URI reference.</param>
        </member>
        <member name="M:Json.Schema.RefKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.RefKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.RefKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.RefKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.RefKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.RefKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.RefKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.RegexFormat">
            <summary>
            A regular-expression-based format.
            </summary>
        </member>
        <member name="M:Json.Schema.RegexFormat.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.RegexFormat"/>.
            </summary>
            <param name="key">The format key.</param>
            <param name="regex">The regular expression.</param>
        </member>
        <member name="M:Json.Schema.RegexFormat.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="node">The node to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true` if the value is a match for the regular expression; `false` otherwise.</returns>
        </member>
        <member name="T:Json.Schema.RequiredKeyword">
            <summary>
            Handles `requires`.
            </summary>
        </member>
        <member name="F:Json.Schema.RequiredKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.RequiredKeyword.Properties">
            <summary>
            The required properties.
            </summary>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.RequiredKeyword"/>.
            </summary>
            <param name="values">The required properties.</param>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Json.Schema.RequiredKeyword"/>.
            </summary>
            <param name="values">The required properties.</param>
        </member>
        <member name="M:Json.Schema.RequiredKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.RequiredKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.RequiredKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.RequiredKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.RequiredKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.RequiredKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.RequiredKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.SchemaConstraint">
            <summary>
            Describes the set of constraints a schema object will apply to any instance.
            </summary>
            <remarks>
            This represents any work that can be performed as part of static analysis of the schema.
            </remarks>
        </member>
        <member name="P:Json.Schema.SchemaConstraint.SchemaBaseUri">
            <summary>
            Gets the schema's base URI.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaConstraint.BaseInstanceLocation">
            <summary>
            Gets the base location within the instance that is being evaluated.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaConstraint.RelativeInstanceLocation">
            <summary>
            Gets the location relative to <see cref="P:Json.Schema.SchemaConstraint.BaseInstanceLocation"/> within the instance that
            is being evaluated.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaConstraint.Constraints">
            <summary>
            Gets the set of keyword constraints.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaConstraint.InstanceLocator">
            <summary>
            Defines a method to identify relative instance locations at evaluation time.
            </summary>
            <remarks>
            When the relative instance location cannot be determined through static analysis,
            e.g. `additionalProperties`, this function can be used to dynamically provide
            JSON Pointers to those locations at evaluation time.
            </remarks>
        </member>
        <member name="P:Json.Schema.SchemaConstraint.LocalSchema">
            <summary>
            Gets the local <see cref="T:Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaConstraint.BuildEvaluation(System.Text.Json.Nodes.JsonNode,Json.Pointer.JsonPointer,Json.Pointer.JsonPointer,Json.Schema.EvaluationOptions)">
            <summary>
            Builds an evaluation object.
            </summary>
            <param name="localInstance">The local instance being evaluated.</param>
            <param name="instanceLocation">The full instance location.</param>
            <param name="evaluationPath">The evaluation path.</param>
            <param name="options">Any evaluation options.  This will be passed via the evaluation context.</param>
            <returns>A schema evaluation object.</returns>
        </member>
        <member name="T:Json.Schema.SchemaEvaluation">
            <summary>
            Represents any evaluation-time work (i.e. any work that requires the instance) for schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaEvaluation.LocalInstance">
            <summary>
            Gets the local instance.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaEvaluation.RelativeInstanceLocation">
            <summary>
            Gets the relative instance location.  (The base location can be found in <see cref="P:Json.Schema.SchemaEvaluation.Results"/>.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaEvaluation.Results">
            <summary>
            Gets the local evaluation results.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaEvaluation.Evaluate(Json.Schema.EvaluationContext)">
            <summary>
            Processes the evaluation.
            </summary>
            <param name="context">The evaluation context.</param>
        </member>
        <member name="T:Json.Schema.SchemaKeyword">
            <summary>
            Handles `$schema`.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaKeyword.Schema">
            <summary>
            The meta-schema ID.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaKeyword.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.SchemaKeyword"/>.
            </summary>
            <param name="schema">The meta-schema ID.</param>
        </member>
        <member name="M:Json.Schema.SchemaKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.SchemaKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.SchemaKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.SchemaKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.SchemaKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.SchemaKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.SchemaKeywordAttribute">
            <summary>
            Indicates the keyword as it appears in a schema.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaKeywordAttribute.Name">
            <summary>
            The keyword name.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaKeywordAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.SchemaKeywordAttribute"/>.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Json.Schema.SchemaKeywordRegistry">
            <summary>
            Manages which keywords are known by the system.
            </summary>
            <remarks>
            Because the deserialization process relies on keywords being registered,
            this class cannot be an instance class like the other registries in this
            library.  Therefore keywords are registered for all schemas.
            </remarks>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.Register``1">
            <summary>
            Registers a new keyword type.
            </summary>
            <typeparam name="T">The keyword type.</typeparam>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.Unregister``1">
            <summary>
            Unregisters a keyword type.
            </summary>
            <typeparam name="T">The keyword type.</typeparam>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.GetImplementationType(System.String)">
            <summary>
            Gets the implementation for a given keyword name.
            </summary>
            <param name="keyword">The keyword name.</param>
            <returns>The keyword type, if registered; otherwise null.</returns>
        </member>
        <member name="M:Json.Schema.SchemaKeywordRegistry.RegisterNullValue``1(``0)">
            <summary>
            Registers a null-value for a keyword.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nullKeyword"></param>
            <remarks>
            This is important for keywords that accept null, like `default` and `const`.  Without
            this step, the serializer will skip keywords that have nulls.
            </remarks>
        </member>
        <member name="T:Json.Schema.SchemaRegistry">
            <summary>
            A registry for schemas.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaRegistry.Global">
            <summary>
            The global registry.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaRegistry.Fetch">
            <summary>
            Gets or sets a method to enable automatic download of schemas by `$id` URI.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaRegistry.Register(Json.Schema.IBaseDocument)">
            <summary>
            Registers a schema by URI.
            </summary>
            <param name="document">The schema.</param>
        </member>
        <member name="M:Json.Schema.SchemaRegistry.Register(System.Uri,Json.Schema.IBaseDocument)">
            <summary>
            Registers a schema by URI.
            </summary>
            <param name="uri">The URI ID of the schema..</param>
            <param name="document">The schema.</param>
        </member>
        <member name="M:Json.Schema.SchemaRegistry.Get(System.Uri)">
            <summary>
            Gets a schema by URI ID and/or anchor.
            </summary>
            <param name="uri">The URI ID.</param>
            <returns>
            The schema, if registered in either this or the global registry;4
            otherwise null.
            </returns>
        </member>
        <member name="T:Json.Schema.SchemaSpecVersionAttribute">
            <summary>
            Indicates which JSON Schema specification versions are supported by a keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.SchemaSpecVersionAttribute.Version">
            <summary>
            The supported version.
            </summary>
        </member>
        <member name="M:Json.Schema.SchemaSpecVersionAttribute.#ctor(Json.Schema.SpecVersion)">
            <summary>
            Creates a new <see cref="T:Json.Schema.SchemaSpecVersionAttribute"/>.
            </summary>
            <param name="version">The supported version.</param>
        </member>
        <member name="T:Json.Schema.SchemaValueType">
            <summary>
            Enumerates the schema value types.
            </summary>
            <remarks>
            This is a flags-enabled enumeration, so values that support multiple
            types can be bit-wise OR'd `|` together.
            </remarks>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Object">
            <summary>
            Indicates the value should be an object.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Array">
            <summary>
            Indicates the value should be an array.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Boolean">
            <summary>
            Indicates the value should be a boolean.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.String">
            <summary>
            Indicates the value should be a string.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Number">
            <summary>
            Indicates the value should be a number.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Integer">
            <summary>
            Indicates the value should be an integer.
            </summary>
        </member>
        <member name="F:Json.Schema.SchemaValueType.Null">
            <summary>
            Indicates the value should be null.
            </summary>
        </member>
        <member name="T:Json.Schema.Serialization.JsonSchemaAttribute">
            <summary>
            Identifies a <see cref="T:Json.Schema.JsonSchema"/> to use when deserializing a type.
            </summary>
        </member>
        <member name="M:Json.Schema.Serialization.JsonSchemaAttribute.#ctor(System.Type,System.String)">
            <summary>
            Identifies a <see cref="T:Json.Schema.JsonSchema"/> to use when deserializing a type.
            </summary>
            <param name="declaringType">The type declaring the schema.</param>
            <param name="memberName">The property or field name for the schema.  This member must be public and static.</param>
            <exception cref="T:System.ArgumentException">Thrown when the member cannot be found or is not public and static.</exception>
        </member>
        <member name="T:Json.Schema.Serialization.ValidatingJsonConverter">
            <summary>
            Adds schema validation for types decorated with the <see cref="T:Json.Schema.Serialization.JsonSchemaAttribute"/>.
            </summary>
        </member>
        <member name="P:Json.Schema.Serialization.ValidatingJsonConverter.OutputFormat">
            <summary>
            Specifies the output format.
            </summary>
        </member>
        <member name="P:Json.Schema.Serialization.ValidatingJsonConverter.RequireFormatValidation">
            <summary>
            Specifies whether the `format` keyword should be required to provide
            validation results.  Default is false, which just produces annotations
            for drafts 2019-09 and prior or follows the behavior set forth by the
            format-annotation vocabulary requirement in the `$vocabulary` keyword in
            a meta-schema declaring draft 2020-12.
            </summary>
        </member>
        <member name="M:Json.Schema.Serialization.ValidatingJsonConverter.CanConvert(System.Type)">
            <summary>When overridden in a derived class, determines whether the converter instance can convert the specified object type.</summary>
            <param name="typeToConvert">The type of the object to check whether it can be converted by this converter instance.</param>
            <returns>
            <see langword="true" /> if the instance can convert the specified object type; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Json.Schema.Serialization.ValidatingJsonConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Creates a converter for a specified type.</summary>
            <param name="typeToConvert">The type handled by the converter.</param>
            <param name="options">The serialization options to use.</param>
            <returns>
            An instance of a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> where `T` is compatible with <paramref name="typeToConvert"/>.
            If <see langword="null"/> is returned, a <see cref="T:System.NotSupportedException"/> will be thrown.
            </returns>
        </member>
        <member name="T:Json.Schema.SpecVersion">
            <summary>
            Enumerates the supported JSON Schema specification versions.
            </summary>
        </member>
        <member name="F:Json.Schema.SpecVersion.Unspecified">
            <summary>
            The specification version to use should be determined by the collection of keywords.
            </summary>
        </member>
        <member name="F:Json.Schema.SpecVersion.Draft6">
            <summary>
            JSON Schema Draft 6.
            </summary>
        </member>
        <member name="F:Json.Schema.SpecVersion.Draft7">
            <summary>
            JSON Schema Draft 7.
            </summary>
        </member>
        <member name="F:Json.Schema.SpecVersion.Draft201909">
            <summary>
            JSON Schema Draft 2019-09.
            </summary>
        </member>
        <member name="F:Json.Schema.SpecVersion.Draft202012">
            <summary>
            JSON Schema Draft 2020-12.
            </summary>
        </member>
        <member name="F:Json.Schema.SpecVersion.DraftNext">
            <summary>
            JSON Schema Draft Next.
            </summary>
        </member>
        <member name="T:Json.Schema.ThenKeyword">
            <summary>
            Handles `then`.
            </summary>
        </member>
        <member name="F:Json.Schema.ThenKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.ThenKeyword.Schema">
            <summary>
            The schema to match.
            </summary>
        </member>
        <member name="M:Json.Schema.ThenKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.ThenKeyword"/>.
            </summary>
            <param name="value">The schema to match.</param>
        </member>
        <member name="M:Json.Schema.ThenKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.ThenKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.ThenKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.ThenKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.ThenKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.ThenKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.ThenKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.TitleKeyword">
            <summary>
            Handles `title`.
            </summary>
        </member>
        <member name="F:Json.Schema.TitleKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.TitleKeyword.Value">
            <summary>
            The title.
            </summary>
        </member>
        <member name="M:Json.Schema.TitleKeyword.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.TitleKeyword"/>.
            </summary>
            <param name="value">The title.</param>
        </member>
        <member name="M:Json.Schema.TitleKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.TitleKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.TitleKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.TitleKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.TitleKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.TitleKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.TitleKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.TypeKeyword">
            <summary>
            Handles `type`.
            </summary>
        </member>
        <member name="F:Json.Schema.TypeKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.TypeKeyword.Type">
            <summary>
            The expected type.
            </summary>
        </member>
        <member name="M:Json.Schema.TypeKeyword.#ctor(Json.Schema.SchemaValueType)">
            <summary>
            Creates a new <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <param name="type">The expected type.</param>
        </member>
        <member name="M:Json.Schema.TypeKeyword.#ctor(Json.Schema.SchemaValueType[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <param name="types">The expected types.</param>
        </member>
        <member name="M:Json.Schema.TypeKeyword.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.SchemaValueType})">
            <summary>
            Creates a new <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
            <param name="types">The expected types.</param>
        </member>
        <member name="M:Json.Schema.TypeKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.TypeKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.TypeKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.TypeKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.TypeKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.TypeKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.TypeKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.UnevaluatedItemsKeyword">
            <summary>
            Handles `unevaluatedItems`.
            </summary>
        </member>
        <member name="F:Json.Schema.UnevaluatedItemsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.UnevaluatedItemsKeyword.Schema">
            <summary>
            The schema by which to evaluate unevaluated items.
            </summary>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnevaluatedItemsKeyword"/>.
            </summary>
            <param name="value">The schema by which to evaluate unevaluated items.</param>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.UnevaluatedItemsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.UnevaluatedItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.UnevaluatedItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.UnevaluatedItemsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.UnevaluatedItemsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.UnevaluatedPropertiesKeyword">
            <summary>
            Handles `unevaluatedProperties`.
            </summary>
        </member>
        <member name="F:Json.Schema.UnevaluatedPropertiesKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.UnevaluatedPropertiesKeyword.Schema">
            <summary>
            The schema by which to evaluate additional properties.
            </summary>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeyword.#ctor(Json.Schema.JsonSchema)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnevaluatedPropertiesKeyword"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.UnevaluatedPropertiesKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.UnevaluatedPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.UnevaluatedPropertiesKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.UnevaluatedPropertiesKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.UnevaluatedPropertiesKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.UniqueItemsKeyword">
            <summary>
            Handles `uniqueItems`.
            </summary>
        </member>
        <member name="F:Json.Schema.UniqueItemsKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.UniqueItemsKeyword.Value">
            <summary>
            Whether items should be unique.
            </summary>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UniqueItemsKeyword"/>.
            </summary>
            <param name="value">Whether items should be unique.</param>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.UniqueItemsKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.UniqueItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.UniqueItemsKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.UniqueItemsKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.UniqueItemsKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.UnknownFormat">
            <summary>
            Represents an unknown format.
            </summary>
        </member>
        <member name="M:Json.Schema.UnknownFormat.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnknownFormat"/> instance.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Json.Schema.UnknownFormat.Validate(System.Text.Json.Nodes.JsonNode,System.String@)">
            <summary>
            Validates an instance against a format and provides an error message.
            </summary>
            <param name="node">The node to validate.</param>
            <param name="errorMessage">An error message.</param>
            <returns>`true`.  Override to return another value.</returns>
        </member>
        <member name="T:Json.Schema.UnrecognizedKeyword">
            <summary>
            Handles unrecognized keywords.
            </summary>
        </member>
        <member name="P:Json.Schema.UnrecognizedKeyword.Name">
            <summary>
            The name or key of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.UnrecognizedKeyword.Value">
            <summary>
            The value of the keyword.
            </summary>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeyword.#ctor(System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new <see cref="T:Json.Schema.UnrecognizedKeyword"/>.
            </summary>
            <param name="name">The name of the keyword.</param>
            <param name="value">The value of the keyword.</param>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.UnrecognizedKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.UnrecognizedKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.UnrecognizedKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.UnrecognizedKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.UnrecognizedKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.UriExtensions">
            <summary>
            Provides extensions on the <see cref="T:System.Uri"/> type.
            </summary>
        </member>
        <member name="M:Json.Schema.UriExtensions.GetParentUri(System.Uri)">
            <summary>
            Gets the Uri to the parent object.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of a resource, for which the parent Uri should be retrieved.</param>
            <returns>
            The parent <see cref="T:System.Uri" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> has no parent, it refers to a root resource.</exception>
        </member>
        <member name="T:Json.Schema.Vocabularies">
            <summary>
            Declares the vocabularies of the supported drafts.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core201909Id">
            <summary>
            The Draft 2019-09 Core vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator201909Id">
            <summary>
            The Draft 2019-09 Applicator vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation201909Id">
            <summary>
            The Draft 2019-09 Validation vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata201909Id">
            <summary>
            The Draft 2019-09 Metadata vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Format201909Id">
            <summary>
            The Draft 2019-09 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content201909Id">
            <summary>
            The Draft 2019-09 Content vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core201909">
            <summary>
            The Draft 2019-09 Core vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator201909">
            <summary>
            The Draft 2019-09 Applicator vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation201909">
            <summary>
            The Draft 2019-09 Validation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata201909">
            <summary>
            The Draft 2019-09 Metadata vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Format201909">
            <summary>
            The Draft 2019-09 Format vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content201909">
            <summary>
            The Draft 2019-09 Content vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core202012Id">
            <summary>
            The Draft 2020-12 Core vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Unevaluated202012Id">
            <summary>
            The Draft 2020-12 Unevaluated vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator202012Id">
            <summary>
            The Draft 2020-12 Applicator vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation202012Id">
            <summary>
            The Draft 2020-12 Validation vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata202012Id">
            <summary>
            The Draft 2020-12 Metadata vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAnnotation202012Id">
            <summary>
            The Draft 2020-12 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAssertion202012Id">
            <summary>
            The Draft 2020-12 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content202012Id">
            <summary>
            The Draft 2020-12 Content vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Core202012">
            <summary>
            The Draft 2020-12 Core vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Unevaluated202012">
            <summary>
            The Draft 2020-12 Unevaluated vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Applicator202012">
            <summary>
            The Draft 2020-12 Applicator vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Validation202012">
            <summary>
            The Draft 2020-12 Validation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Metadata202012">
            <summary>
            The Draft 2020-12 Metadata vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAnnotation202012">
            <summary>
            The Draft 2020-12 Format-Annotation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAssertion202012">
            <summary>
            The Draft 2020-12 Format-Assertion vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.Content202012">
            <summary>
            The Draft 2020-12 Content vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.CoreNextId">
            <summary>
            The Draft 2020-12 Core vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.UnevaluatedNextId">
            <summary>
            The Draft 2020-12 Unevaluated vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.ApplicatorNextId">
            <summary>
            The Draft 2020-12 Applicator vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.ValidationNextId">
            <summary>
            The Draft 2020-12 Validation vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.MetadataNextId">
            <summary>
            The Draft 2020-12 Metadata vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAnnotationNextId">
            <summary>
            The Draft 2020-12 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAssertionNextId">
            <summary>
            The Draft 2020-12 Format vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.ContentNextId">
            <summary>
            The Draft 2020-12 Content vocabulary ID.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.CoreNext">
            <summary>
            The Draft 2020-12 Core vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.UnevaluatedNext">
            <summary>
            The Draft 2020-12 Unevaluated vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.ApplicatorNext">
            <summary>
            The Draft 2020-12 Applicator vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.ValidationNext">
            <summary>
            The Draft 2020-12 Validation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.MetadataNext">
            <summary>
            The Draft 2020-12 Metadata vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAnnotationNext">
            <summary>
            The Draft 2020-12 Format-Annotation vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.FormatAssertionNext">
            <summary>
            The Draft 2020-12 Format-Assertion vocabulary.
            </summary>
        </member>
        <member name="F:Json.Schema.Vocabularies.ContentNext">
            <summary>
            The Draft 2020-12 Content vocabulary.
            </summary>
        </member>
        <member name="T:Json.Schema.Vocabulary">
            <summary>
            Represents a Draft 2019-09 and later vocabulary.
            </summary>
        </member>
        <member name="P:Json.Schema.Vocabulary.Id">
            <summary>
            The vocabulary ID.
            </summary>
        </member>
        <member name="P:Json.Schema.Vocabulary.Keywords">
            <summary>
            The types of the keywords that are defined by the vocabulary.
            </summary>
        </member>
        <member name="M:Json.Schema.Vocabulary.#ctor(System.String,System.Type[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.Vocabulary"/>.
            </summary>
            <param name="id">The vocabulary ID.</param>
            <param name="keywords">The types of the keywords that are defined by the vocabulary.</param>
        </member>
        <member name="M:Json.Schema.Vocabulary.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Vocabulary"/>.
            </summary>
            <param name="id">The vocabulary ID.</param>
            <param name="keywords">The types of the keywords that are defined by the vocabulary.</param>
        </member>
        <member name="T:Json.Schema.VocabularyAttribute">
            <summary>
            Indicates the ID of the vocabulary a keyword belongs to.
            </summary>
        </member>
        <member name="P:Json.Schema.VocabularyAttribute.Id">
            <summary>
            The vocabulary ID.
            </summary>
        </member>
        <member name="M:Json.Schema.VocabularyAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.VocabularyAttribute"/>.
            </summary>
            <param name="id">The vocabulary ID.</param>
        </member>
        <member name="T:Json.Schema.VocabularyKeyword">
            <summary>
            Handles `$vocabulary`.
            </summary>
        </member>
        <member name="F:Json.Schema.VocabularyKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.VocabularyKeyword.Vocabulary">
            <summary>
            The collection of vocabulary requirements.
            </summary>
        </member>
        <member name="M:Json.Schema.VocabularyKeyword.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Uri,System.Boolean})">
            <summary>
            Creates a new <see cref="T:Json.Schema.VocabularyKeyword"/>.
            </summary>
            <param name="values">The collection of vocabulary requirements.</param>
        </member>
        <member name="M:Json.Schema.VocabularyKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.VocabularyKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.VocabularyKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.VocabularyKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.VocabularyKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.VocabularyKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.VocabularyKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Json.Schema.VocabularyRegistry">
            <summary>
            A registry for vocabularies.
            </summary>
        </member>
        <member name="P:Json.Schema.VocabularyRegistry.Global">
            <summary>
            The global registry.
            </summary>
        </member>
        <member name="M:Json.Schema.VocabularyRegistry.Register(Json.Schema.Vocabulary)">
            <summary>
            Registers a vocabulary.  This does not register the vocabulary's
            keywords.  This must be done separately.
            </summary>
            <param name="vocabulary"></param>
        </member>
        <member name="M:Json.Schema.VocabularyRegistry.IsKnown(System.Uri)">
            <summary>
            Indicates whether a vocabulary is known by URI ID and/or anchor.
            </summary>
            <param name="vocabularyId">The URI ID.</param>
            <returns>
            `true`, if registered in either this or the global registry;
            `false` otherwise.
            </returns>
        </member>
        <member name="M:Json.Schema.VocabularyRegistry.Get(System.Uri)">
            <summary>
            Retrieves the vocabulary associated with the URI ID, if known.
            </summary>
            <param name="vocabularyId">The URI ID.</param>
            <returns>The vocabulary, if known; otherwise null.</returns>
        </member>
        <member name="T:Json.Schema.WriteOnlyKeyword">
            <summary>
            Handles `writeOnly`.
            </summary>
        </member>
        <member name="F:Json.Schema.WriteOnlyKeyword.Name">
            <summary>
            The JSON name of the keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.WriteOnlyKeyword.Value">
            <summary>
            Whether the instance is read-only.
            </summary>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeyword.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.WriteOnlyKeyword"/>.
            </summary>
            <param name="value">Whether the instance is read-only.</param>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeyword.GetConstraint(Json.Schema.SchemaConstraint,System.Collections.Generic.IReadOnlyList{Json.Schema.KeywordConstraint},Json.Schema.EvaluationContext)">
            <summary>
            Builds a constraint object for a keyword.
            </summary>
            <param name="schemaConstraint">The <see cref="T:Json.Schema.SchemaConstraint"/> for the schema object that houses this keyword.</param>
            <param name="localConstraints">
            The set of other <see cref="T:Json.Schema.KeywordConstraint"/>s that have been processed prior to this one.
            Will contain the constraints for keyword dependencies.
            </param>
            <param name="context">The <see cref="T:Json.Schema.EvaluationContext"/>.</param>
            <returns>A constraint object.</returns>
        </member>
        <member name="T:Json.Schema.WriteOnlyKeywordJsonConverter">
            <summary>
            JSON converter for <see cref="T:Json.Schema.WriteOnlyKeyword"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeywordJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <see cref="T:Json.Schema.WriteOnlyKeyword"/>.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Json.Schema.WriteOnlyKeywordJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Json.Schema.WriteOnlyKeyword,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
    </members>
</doc>
