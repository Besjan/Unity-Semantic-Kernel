<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonSchema.Net.Generation</name>
    </assembly>
    <members>
        <member name="T:Json.Schema.Generation.AttributeHandler">
            <summary>
            Adds attribute-related schema elements.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.AttributeHandler.AddHandler``1">
            <summary>
            Adds a handler for a custom attribute that cannot be made to implement <see cref="T:Json.Schema.Generation.IAttributeHandler"/>.
            </summary>
            <typeparam name="T">The handler type.</typeparam>
        </member>
        <member name="M:Json.Schema.Generation.AttributeHandler.AddHandler(Json.Schema.Generation.IAttributeHandler)">
            <summary>
            Adds a handler for a custom attribute that cannot be made to implement <see cref="T:Json.Schema.Generation.IAttributeHandler"/>.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Json.Schema.Generation.AttributeHandler.RemoveHandler``1">
            <summary>
            Removes a handler type.
            </summary>
            <typeparam name="T">The handler type.</typeparam>
        </member>
        <member name="T:Json.Schema.Generation.AdditionalItemsAttribute">
            <summary>
            Applies an `additionalProperties` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.AdditionalItemsAttribute.BoolValue">
            <summary>
            If the attribute value represents a boolean schema, gets the boolean value.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.AdditionalItemsAttribute.TypeValue">
            <summary>
            If the attribute value represents a type schema, gets the type.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.AdditionalItemsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.AdditionalPropertiesAttribute"/> instance.
            </summary>
            <param name="boolSchema">A boolean schema.</param>
        </member>
        <member name="M:Json.Schema.Generation.AdditionalItemsAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.AdditionalPropertiesAttribute"/> instance.
            </summary>
            <param name="typeSchema">A type to generate the a schema for the keyword.</param>
        </member>
        <member name="T:Json.Schema.Generation.AdditionalPropertiesAttribute">
            <summary>
            Applies an `additionalProperties` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.AdditionalPropertiesAttribute.BoolValue">
            <summary>
            If the attribute value represents a boolean schema, gets the boolean value.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.AdditionalPropertiesAttribute.TypeValue">
            <summary>
            If the attribute value represents a type schema, gets the type.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.AdditionalPropertiesAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.AdditionalPropertiesAttribute"/> instance.
            </summary>
            <param name="boolSchema">A boolean schema.</param>
        </member>
        <member name="M:Json.Schema.Generation.AdditionalPropertiesAttribute.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.AdditionalPropertiesAttribute"/> instance.
            </summary>
            <param name="typeSchema">A type to generate the a schema for the keyword.</param>
        </member>
        <member name="T:Json.Schema.Generation.ConditionalAttribute">
            <summary>
            Serves as a base class for attributes which support conditional schema generation.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.ConditionalAttribute.ConditionGroup">
            <summary>
            Identifies the condition group under which this attribute applies.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.ConstAttribute">
            <summary>
            Applies a `const` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.ConstAttribute.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.ConstAttribute.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.ConstAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.DefaultAttribute">
            <summary>
            Applies a `default` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.DefaultAttribute.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.DefaultAttribute.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.DefaultAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.DescriptionAttribute">
            <summary>
            Applies a `description` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.DescriptionAttribute.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.DescriptionAttribute"/> instance.
            </summary>
            <param name="description">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.ExclusiveMaximumAttribute">
            <summary>
            Applies an `exclusiveMaximum` keyword.
            </summary>
            <remarks>
            The `value` parameter is provided in the constructor as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.ExclusiveMaximumAttribute.Value">
            <summary>
            The exclusive maximum.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.ExclusiveMaximumAttribute.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.ExclusiveMaximumAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            The <paramref name="value"/> parameter is provided as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.ExclusiveMinimumAttribute">
            <summary>
            Applies an `exclusiveMinimum` keyword.
            </summary>
            <remarks>
            The `value` parameter is provided in the constructor as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.ExclusiveMinimumAttribute.Value">
            <summary>
            The exclusive minimum.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.ExclusiveMinimumAttribute.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.ExclusiveMinimumAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            The <paramref name="value"/> parameter is provided as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.IfAttribute">
            <summary>
            Creates or amends a condition group by expecting a value in a property.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.IfAttribute.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.IfAttribute.Value">
            <summary>
            The expected property value.
            </summary>
            <remarks>
            The compiler will allow any compile-time constant, however only JSON-compatible
            values will work.
            </remarks>
        </member>
        <member name="M:Json.Schema.Generation.IfAttribute.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.IfAttribute"/> instance.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The expected value for the property (should be JSON-compatible).</param>
            <param name="group">The condition group.</param>
        </member>
        <member name="T:Json.Schema.Generation.IfEnumAttribute">
            <summary>
            Creates multiple condition groups based on the value of an enum property, one group for each defined enum value.
            </summary>
            <remarks>
            The enum type is inferred from the property.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.IfEnumAttribute.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.IfEnumAttribute.UseNumbers">
            <summary>
            Gets or sets whether to use numbers or names in the condition.  Default is to use names.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.IfEnumAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.IfEnumAttribute"/> instance.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="useNumbers">(optional) Whether to use numbers or names in the condition.  Default is to use names.</param>
        </member>
        <member name="T:Json.Schema.Generation.IfMaxAttribute">
            <summary>
            Creates or amends a condition group by defining an expected maximum value in a property.
            </summary>
            <remarks>
            The specific keywords which are added depend on the type of the targeted property.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.IfMaxAttribute.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.IfMaxAttribute.Value">
            <summary>
            The expected maximum value.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.IfMaxAttribute.IsExclusive">
            <summary>
            Gets or sets whether the value should be exclusive.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.IfMaxAttribute.#ctor(System.String,System.Double,System.Object)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.IfAttribute"/> instance.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The expected maximum value for the property.</param>
            <param name="group">The condition group.</param>
            <remarks>
            The <paramref name="value"/> parameter is provided as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted
            when applied as the `maximum` or `exclusiveMaximum` keywords.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.IfMinAttribute">
            <summary>
            Creates or amends a condition group by defining an expected minimum value in a property.
            </summary>
            <remarks>
            The specific keywords which are added depend on the type of the targeted property.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.IfMinAttribute.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.IfMinAttribute.Value">
            <summary>
            The expected minimum value.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.IfMinAttribute.IsExclusive">
            <summary>
            Gets or sets whether the value should be exclusive.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.IfMinAttribute.#ctor(System.String,System.Double,System.Object)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.IfAttribute"/> instance.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The expected minimum value for the property.</param>
            <param name="group">The condition group.</param>
            <remarks>
            The <paramref name="value"/> parameter is provided as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted
            when applied as the `minimum` or `exclusiveMinimum` keywords.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.JsonExcludeAttribute">
            <summary>
            Indicates that the property should be excluded from generation.
            </summary>
            <remarks>
            This attribute functions exactly the same as the <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute"/>.  It
            is included separately to support the case where the model should be serialized with
            a property but schema generation should ignore it.
            </remarks>
        </member>
        <member name="M:Json.Schema.Generation.JsonExcludeAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Json.Schema.Generation.JsonExcludeAttribute"/>.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.JsonIncludeAttribute">
             <summary>
             Indicates that the property or field should be included for serialization and deserialization.
             </summary>
             <remarks>
             When applied to a public property, indicates that non-public getters and setters should be used for serialization and deserialization.
            
             Non-public properties and fields are not allowed when serializing and deserializing. If the attribute is used on a non-public property or field,
             an <see cref="T:System.InvalidOperationException"/> is thrown during the first serialization or deserialization of the declaring type.
             </remarks>
        </member>
        <member name="M:Json.Schema.Generation.JsonIncludeAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Json.Schema.Generation.JsonIncludeAttribute"/>.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.JsonNumberHandlingAttributeHandler">
            <summary>
            Handler for the <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute"/>.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.JsonNumberHandlingAttributeHandler.AddConstraints(Json.Schema.Generation.SchemaGenerationContextBase,System.Attribute)">
            <summary>
            Processes the type and any attributes (present on the context), and adds
            intents to the context.
            </summary>
            <param name="context">The generation context.</param>
            <param name="attribute"></param>
        </member>
        <member name="T:Json.Schema.Generation.MaximumAttribute">
            <summary>
            Applies a `maximum` keyword.
            </summary>
            <remarks>
            The `value` parameter is provided in the constructor as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.MaximumAttribute.Value">
            <summary>
            The maximum.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.MaximumAttribute.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.MaximumAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            The <paramref name="value"/> parameter is provided as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.MaxItemsAttribute">
            <summary>
            Applies an `maxItems` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.MaxItemsAttribute.Value">
            <summary>
            The maximum number of items.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.MaxItemsAttribute.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.MaxItemsAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.MaxLengthAttribute">
            <summary>
            Applies a `maxLength` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.MaxLengthAttribute.Length">
            <summary>
            The maximum length.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.MaxLengthAttribute.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.MaxLengthAttribute"/> instance.
            </summary>
            <param name="length">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.MinimumAttribute">
            <summary>
            Applies a `minimum` keyword.
            </summary>
            <remarks>
            The `value` parameter is provided in the constructor as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.MinimumAttribute.Value">
            <summary>
            The minimum.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.MinimumAttribute.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.MinimumAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            The <paramref name="value"/> parameter is provided as a `double` but stored as a `decimal`
            because `decimal` is not a valid attribute parameter type.
            As such, to prevent overflows, the value is clamped to the `decimal` range prior to being converted.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.MinItemsAttribute">
            <summary>
            Applies a `minItems` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.MinItemsAttribute.Value">
            <summary>
            The minimum number of items.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.MinItemsAttribute.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.MinItemsAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.MinLengthAttribute">
            <summary>
            Applies a `minimum` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.MinLengthAttribute.Length">
            <summary>
            The minimum length.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.MinLengthAttribute.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.MinLengthAttribute"/> instance.
            </summary>
            <param name="length">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.MultipleOfAttribute">
            <summary>
            Applies a `multipleOf` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.MultipleOfAttribute.Value">
            <summary>
            The divisor.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.MultipleOfAttribute.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.MultipleOfAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.NullableAttribute">
            <summary>
            Overrides the <see cref="P:Json.Schema.Generation.SchemaGeneratorConfiguration.Nullability"/> option and either
            adds or removes `null` in the `type` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.NullableAttribute.IsNullable">
            <summary>
            Gets whether `null` should be included in the `type` keyword.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.NullableAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.NullableAttribute"/> instance.
            </summary>
            <param name="isNullable">Whether `null` should be included in the `type` keyword.</param>
        </member>
        <member name="T:Json.Schema.Generation.PatternAttribute">
            <summary>
            Applies a `pattern` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.PatternAttribute.Value">
            <summary>
            The regular expression pattern.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.PatternAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.PatternAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.ReadOnlyAttribute">
            <summary>
            Applies a `readOnly` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.ReadOnlyAttribute.Value">
            <summary>
            Whether the property should be read-only.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.ReadOnlyAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.ReadOnlyAttribute"/> instance with a value of `true`.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.ReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.ReadOnlyAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.RequiredAttribute">
            <summary>
            Indicates a property is required and should be listed in the
            `required` keyword.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.TitleAttribute">
            <summary>
            Applies a `title` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.TitleAttribute.Title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.TitleAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.TitleAttribute"/> instance.
            </summary>
            <param name="title">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.UniqueItemsAttribute">
            <summary>
            Applies a `uniqueItems` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.UniqueItemsAttribute.Value">
            <summary>
            Whether the items should be unique.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.UniqueItemsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.UniqueItemsAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.WriteOnlyAttribute">
            <summary>
            Applies a `writeOnly` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.WriteOnlyAttribute.Value">
            <summary>
            Whether the property should be write-only.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.WriteOnlyAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.WriteOnlyAttribute"/> instance with a value of `true`.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.WriteOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.WriteOnlyAttribute"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Json.Schema.Generation.ContextExtensions">
            <summary>
            Extension methods for context objects.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.ContextExtensions.GetAttributes(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Gets the attribute set.  Type contexts get type attributes; member context
            get member attributes.
            </summary>
            <param name="context">The context.</param>
            <returns>The attribute set.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown for other context types.</exception>
        </member>
        <member name="T:Json.Schema.Generation.GeneratorRegistry">
            <summary>
            Tracks the available generators.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.GeneratorRegistry.Register(Json.Schema.Generation.Generators.ISchemaGenerator)">
            <summary>
            Registers a new generator.
            </summary>
            <param name="generator">The generator.</param>
            <remarks>
            Registration is order dependent: last one wins.  If you have multiple generators which
            can handle a given type, the last one registered will be used.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.Generators.ISchemaGenerator">
             <summary>
             Defines a generator.
             </summary>
             <remarks>
            	Generators are the first stage of schema generation.  These will add keyword intents
             to the context, which then are translated into keywords after optimization.
            
             Implementations MUST also override <see cref="M:System.Object.GetHashCode"/>
             </remarks>
        </member>
        <member name="M:Json.Schema.Generation.Generators.ISchemaGenerator.Handles(System.Type)">
            <summary>
            Determines whether the generator can be used to generate a schema for this type.
            </summary>
            <param name="type">The type.</param>
            <returns>`true` if the generator can be used; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Schema.Generation.Generators.ISchemaGenerator.AddConstraints(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Processes the type and any attributes (present on the context), and adds
            intents to the context.
            </summary>
            <param name="context">The generation context.</param>
        </member>
        <member name="T:Json.Schema.Generation.IAttributeHandler">
            <summary>
            Defines requirements to handle converting an attribute to a keyword intent.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.IAttributeHandler.AddConstraints(Json.Schema.Generation.SchemaGenerationContextBase,System.Attribute)">
            <summary>
            Processes the type and any attributes (present on the context), and adds
            intents to the context.
            </summary>
            <param name="context">The generation context.</param>
            <param name="attribute">The attribute.</param>
            <remarks>
            A common pattern is to implement <see cref="T:Json.Schema.Generation.IAttributeHandler"/> on the
            attribute itself.  In this case, the <paramref name="attribute"/> parameter
            will be the same instance as the handler and can likely be ignored.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.IAttributeHandler`1">
            <summary>
            Processes attributes of type <typeparamref name="T"/> that are present on a
            type or member and adds intents to the context.
            </summary>
            <typeparam name="T">The type of the attribute that is handled.</typeparam>
        </member>
        <member name="T:Json.Schema.Generation.IContextContainer">
            <summary>
            Indicates to the generation system that this object contains contexts.
            </summary>
            <remarks>
            Implement this on your <see cref="T:Json.Schema.Generation.ISchemaKeywordIntent"/> to indicate that it
            contains other contexts.  Intents that need this are generally associated with
            applicator keywords, such as `items` and `allOf`.
            </remarks>
        </member>
        <member name="M:Json.Schema.Generation.IContextContainer.Replace(System.Int32,Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Replaces one context with another.
            </summary>
            <param name="hashCode">The hashcode of the context to replace.</param>
            <param name="newContext">The new context.</param>
            <remarks>
            To implement this, call <see cref="M:System.Object.GetHashCode"/> on the contained
            contexts.  If any match, replace them with <paramref name="newContext"/>.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.Intents.AdditionalItemsIntent">
            <summary>
            Provides intent to create an `additionalItems` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.AdditionalItemsIntent.Context">
            <summary>
            The context that represents the inner requirements.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AdditionalItemsIntent.#ctor(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.AdditionalItemsIntent"/> instance.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AdditionalItemsIntent.Replace(System.Int32,Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Replaces one context with another.
            </summary>
            <param name="hashCode">The hashcode of the context to replace.</param>
            <param name="newContext">The new context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AdditionalItemsIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.AdditionalPropertiesIntent">
            <summary>
            Provides intent to create an `additionalProperties` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.AdditionalPropertiesIntent.Context">
            <summary>
            The context that represents the inner requirements.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AdditionalPropertiesIntent.#ctor(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.AdditionalPropertiesIntent"/> instance.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AdditionalPropertiesIntent.Replace(System.Int32,Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Replaces one context with another.
            </summary>
            <param name="hashCode">The hashcode of the context to replace.</param>
            <param name="newContext">The new context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AdditionalPropertiesIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.AllOfIntent">
            <summary>
            Provides intent to create a `allOf` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.AllOfIntent.Subschemas">
            <summary>
            Gets the subschemas to include.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AllOfIntent.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Json.Schema.Generation.ISchemaKeywordIntent}})">
            <summary>
            Creates a new instance of the <see cref="T:Json.Schema.Generation.Intents.AllOfIntent"/> class.
            </summary>
            <param name="subschemas">The subschemas to include.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AllOfIntent.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.Generation.ISchemaKeywordIntent}[])">
            <summary>
            Creates a new instance of the <see cref="T:Json.Schema.Generation.Intents.AllOfIntent"/> class.
            </summary>
            <param name="subschemas">The subschemas to include.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AllOfIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.AnyOfIntent">
            <summary>
            Provides intent to create a `anyOf` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.AnyOfIntent.Subschemas">
            <summary>
            Gets the subschemas to include.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AnyOfIntent.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Json.Schema.Generation.ISchemaKeywordIntent}})">
            <summary>
            Creates a new instance of the <see cref="T:Json.Schema.Generation.Intents.AnyOfIntent"/> class.
            </summary>
            <param name="subschemas">The subschemas to include.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AnyOfIntent.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.Generation.ISchemaKeywordIntent}[])">
            <summary>
            Creates a new instance of the <see cref="T:Json.Schema.Generation.Intents.AnyOfIntent"/> class.
            </summary>
            <param name="subschemas">The subschemas to include.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.AnyOfIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.ConstIntent">
            <summary>
            Provides intent to create a `const` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.ConstIntent.Value">
            <summary>
            The expected value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ConstIntent.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.ConstIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ConstIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.DefaultIntent">
            <summary>
            Provides intent to create a `default` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.DefaultIntent.Value">
            <summary>
            The expected value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DefaultIntent.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.DefaultIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DefaultIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.DefsIntent">
            <summary>
            Provides intent to create a `$defs` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.DefsIntent.Definitions">
            <summary>
            The contexts that represent the definitions.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DefsIntent.#ctor(System.Collections.Generic.Dictionary{System.String,Json.Schema.Generation.SchemaGenerationContextBase})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.DefsIntent"/> instance.
            </summary>
            <param name="definitions">The contexts.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DefsIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.DeprecatedIntent">
            <summary>
            Provides intent to create a `deprecated` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.DeprecatedIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DeprecatedIntent.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.DeprecatedIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DeprecatedIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.DescriptionIntent">
            <summary>
            Provides intent to create a `description` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.DescriptionIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DescriptionIntent.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.DescriptionIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.DescriptionIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.ElseIntent">
            <summary>
            Provides intent to create an `else` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.ElseIntent.Subschema">
            <summary>
            A set of intents used to define the subschema.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ElseIntent.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.Generation.ISchemaKeywordIntent})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.ElseIntent"/> instance.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ElseIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.EnumIntent">
            <summary>
            Provides intent to create an `enum` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.EnumIntent.Names">
            <summary>
            The names defined by the enumeration.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.EnumIntent.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.EnumIntent"/> instance.
            </summary>
            <param name="names">The names defined by the enumeration.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.EnumIntent.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.EnumIntent"/> instance.
            </summary>
            <param name="names">The names defined by the enumeration.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.EnumIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.ExclusiveMaximumIntent">
            <summary>
            Provides intent to create an `exclusiveMaximum` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.ExclusiveMaximumIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ExclusiveMaximumIntent.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.ExclusiveMaximumIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ExclusiveMaximumIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.ExclusiveMinimumIntent">
            <summary>
            Provides intent to create an `exclusiveMinimum` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.ExclusiveMinimumIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ExclusiveMinimumIntent.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.ExclusiveMinimumIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ExclusiveMinimumIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.FormatIntent">
            <summary>
            Provides intent to create a `format` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.FormatIntent.Format">
            <summary>
            The format.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.FormatIntent.#ctor(Json.Schema.Format)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.FormatIntent"/> instance.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.FormatIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.IfIntent">
            <summary>
            Provides intent to create an `if` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.IfIntent.Subschema">
            <summary>
            A set of intents used to define the subschema.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.IfIntent.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.Generation.ISchemaKeywordIntent})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.IfIntent"/> instance.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.IfIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.ItemsIntent">
            <summary>
            Provides intent to create an `items` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.ItemsIntent.Context">
            <summary>
            The context that represents the inner requirements.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ItemsIntent.#ctor(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.ItemsIntent"/> instance.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ItemsIntent.Replace(System.Int32,Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Replaces one context with another.
            </summary>
            <param name="hashCode">The hashcode of the context to replace.</param>
            <param name="newContext">The new context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ItemsIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MaximumIntent">
            <summary>
            Provides intent to create a `maximum` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MaximumIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaximumIntent.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MaximumIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaximumIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MaxItemsIntent">
            <summary>
            Provides intent to create a `maxItems` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MaxItemsIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaxItemsIntent.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MaxItemsIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaxItemsIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MaxLengthIntent">
            <summary>
            Provides intent to create a `maxLength` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MaxLengthIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaxLengthIntent.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MaxLengthIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaxLengthIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MaxPropertiesIntent">
            <summary>
            Provides intent to create a `maxProperties` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MaxPropertiesIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaxPropertiesIntent.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MaxPropertiesIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MaxPropertiesIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MinimumIntent">
            <summary>
            Provides intent to create a `minimum` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MinimumIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinimumIntent.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MinimumIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinimumIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MinItemsIntent">
            <summary>
            Provides intent to create a `minItems` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MinItemsIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinItemsIntent.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MinItemsIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinItemsIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MinLengthIntent">
            <summary>
            Provides intent to create a `minLength` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MinLengthIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinLengthIntent.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MinLengthIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinLengthIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MinPropertiesIntent">
            <summary>
            Provides intent to create a `minProperties` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MinPropertiesIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinPropertiesIntent.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MinPropertiesIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MinPropertiesIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.MultipleOfIntent">
            <summary>
            Provides intent to create a `multipleOf` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.MultipleOfIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MultipleOfIntent.#ctor(System.Decimal)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.MultipleOfIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.MultipleOfIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.PatternIntent">
            <summary>
            Provides intent to create a `pattern` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.PatternIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PatternIntent.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.PatternIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PatternIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.PropertiesIntent">
            <summary>
            Provides intent to create an `additionalProperties` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.PropertiesIntent.Properties">
            <summary>
            The contexts that represent the properties.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PropertiesIntent.#ctor(System.Collections.Generic.Dictionary{System.String,Json.Schema.Generation.SchemaGenerationContextBase})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.PropertiesIntent"/> instance.
            </summary>
            <param name="properties">The contexts.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PropertiesIntent.Replace(System.Int32,Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Replaces one context with another.
            </summary>
            <param name="hashCode">The hashcode of the context to replace.</param>
            <param name="newContext">The new context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PropertiesIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.PropertyNamesIntent">
            <summary>
            Provides intent to create a `propertyNames` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.PropertyNamesIntent.Context">
            <summary>
            The context that represents the inner requirements.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PropertyNamesIntent.#ctor(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.PropertyNamesIntent"/> instance.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PropertyNamesIntent.Replace(System.Int32,Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Replaces one context with another.
            </summary>
            <param name="hashCode">The hashcode of the context to replace.</param>
            <param name="newContext">The new context.</param>
            <remarks>
            To implement this, call <see cref="M:System.Object.GetHashCode"/> on the contained
            contexts.  If any match, replace them with <paramref name="newContext"/>.
            </remarks>
        </member>
        <member name="M:Json.Schema.Generation.Intents.PropertyNamesIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.ReadOnlyIntent">
            <summary>
            Provides intent to create a `readOnly` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.ReadOnlyIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ReadOnlyIntent.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.ReadOnlyIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ReadOnlyIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.RefIntent">
            <summary>
            Provides intent to create a `$ref` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.RefIntent.Reference">
            <summary>
            The reference.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.RefIntent.#ctor(System.Uri)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.RefIntent"/> instance.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.RefIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.RequiredIntent">
            <summary>
            Provides intent to create a `required` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.RequiredIntent.RequiredProperties">
            <summary>
            The required property names.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.RequiredIntent.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.RequiredIntent"/> instance.
            </summary>
            <param name="requiredProperties">The required property names.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.RequiredIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.ThenIntent">
            <summary>
            Provides intent to create a `then` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.ThenIntent.Subschema">
            <summary>
            A set of intents used to define the subschema.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ThenIntent.#ctor(System.Collections.Generic.IEnumerable{Json.Schema.Generation.ISchemaKeywordIntent})">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.ThenIntent"/> instance.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.ThenIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.TitleIntent">
            <summary>
            Provides intent to create a `title` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.TitleIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.TitleIntent.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.TitleIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.TitleIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.TypeIntent">
            <summary>
            Provides intent to create a `type` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.TypeIntent.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.TypeIntent.#ctor(Json.Schema.SchemaValueType)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.TypeIntent"/> instance.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.TypeIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.UnevaluatedPropertiesIntent">
            <summary>
            Provides intent to create an `unevaluatedProperties` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.UnevaluatedPropertiesIntent.Context">
            <summary>
            The context that represents the inner requirements.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.UnevaluatedPropertiesIntent.#ctor(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.UnevaluatedPropertiesIntent"/> instance.
            </summary>
            <param name="context">The context, or null to apply the false schema.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.UnevaluatedPropertiesIntent.Replace(System.Int32,Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Replaces one context with another.
            </summary>
            <param name="hashCode">The hashcode of the context to replace.</param>
            <param name="newContext">The new context.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.UnevaluatedPropertiesIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.UniqueItemsIntent">
            <summary>
            Provides intent to create a `uniqueItems` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.UniqueItemsIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.UniqueItemsIntent.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.UniqueItemsIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.UniqueItemsIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.Intents.WriteOnlyIntent">
            <summary>
            Provides intent to create a `writeOnly` keyword.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.Intents.WriteOnlyIntent.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.Intents.WriteOnlyIntent.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Json.Schema.Generation.Intents.WriteOnlyIntent"/> instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Json.Schema.Generation.Intents.WriteOnlyIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.ISchemaKeywordIntent">
             <summary>
             Describes the intent to create a keyword.
             </summary>
             <remarks>
             Because <see cref="T:Json.Schema.JsonSchema"/> is immutable, the system cannot
             generate the schema directly as it needs to do some optimization
             first.  Keyword intents allow this.  They record all of the data
             needed by the keyword.  Application involves translating the
             intent into an actual keyword on the <see cref="T:Json.Schema.JsonSchemaBuilder"/>
             using one of the fluent extension methods provided by
             <see cref="T:Json.Schema.JsonSchemaBuilderExtensions"/>.  Custom intents
             will need to be applied from within custom <see cref="T:Json.Schema.Generation.Generators.ISchemaGenerator"/>
             implementations.
            
             Implementations MUST also override <see cref="M:System.Object.GetHashCode"/>
             </remarks>
        </member>
        <member name="M:Json.Schema.Generation.ISchemaKeywordIntent.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:Json.Schema.Generation.ISchemaRefiner">
            <summary>
            Describes a schema generation refiner.
            </summary>
            <remarks>
            Refiners run after attributes have been processed, before the
            schema itself is created.  This is used to add customization
            logic.
            </remarks>
        </member>
        <member name="M:Json.Schema.Generation.ISchemaRefiner.ShouldRun(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Determines if the refiner should run.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Json.Schema.Generation.ISchemaRefiner.Run(Json.Schema.Generation.SchemaGenerationContextBase)">
            <summary>
            Runs the refiner.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Json.Schema.Generation.ITypeNameGenerator">
            <summary>
            Allows custom `$defs` key naming functionality.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.ITypeNameGenerator.GenerateName(System.Type)">
            <summary>
            Generates a `$defs` key for a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A string to use for the type; null to use the library-provided behavior.</returns>
        </member>
        <member name="T:Json.Schema.Generation.JsonSchemaBuilderExtensions">
            <summary>
            Provides extension methods for schema generation.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.JsonSchemaBuilderExtensions.FromType``1(Json.Schema.JsonSchemaBuilder,Json.Schema.Generation.SchemaGeneratorConfiguration)">
            <summary>
            Generates a schema from a CLR type.
            </summary>
            <typeparam name="T">The type to generate.</typeparam>
            <param name="builder">The schema builder.</param>
            <param name="configuration">The generator configuration.</param>
            <returns>The schema builder (for fluent syntax support).</returns>
        </member>
        <member name="M:Json.Schema.Generation.JsonSchemaBuilderExtensions.FromType(Json.Schema.JsonSchemaBuilder,System.Type,Json.Schema.Generation.SchemaGeneratorConfiguration)">
            <summary>
            Generates a schema from a CLR type.
            </summary>
            <param name="builder">The schema builder.</param>
            <param name="type">The type to generate.</param>
            <param name="configuration">The generator configuration.</param>
            <returns>The schema builder (for fluent syntax support).</returns>
        </member>
        <member name="T:Json.Schema.Generation.MemberGenerationContext">
            <summary>
            Provides context for object members to include those attributes.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.MemberGenerationContext.BasedOn">
            <summary>
            Gets the context this is based on.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.MemberGenerationContext.Attributes">
            <summary>
            Gets the set of member attributes.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.Nullability">
            <summary>
            Indicates whether to apply `null` to the `type` keyword.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.Nullability.Disabled">
            <summary>
            Indicates that `null` will not be included.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.Nullability.AllowForNullableValueTypes">
            <summary>
            Indicates that `null` will be applied to <see cref="T:System.Nullable`1"/> types.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.Nullability.AllowForReferenceTypes">
            <summary>
            Indicates that `null` will be applied to reference types.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.Nullability.AllowForAllTypes">
            <summary>
            Indicates that `null` will be applied to both reference types and <see cref="T:System.Nullable`1"/> types.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.PropertyNameResolver">
            <summary>
            Declares a property name resolution which is used to provide a property name.
            </summary>
            <param name="input">The property.</param>
            <returns>The property name</returns>
        </member>
        <member name="T:Json.Schema.Generation.PropertyNameResolvers">
            <summary>
            Defines a set of predefined property name resolution methods.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.AsDeclared">
            <summary>
            Makes no changes. Properties are generated with the name of the property in code.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.CamelCase">
            <summary>
            Property names to camel case (e.g. `camelCase`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.PascalCase">
            <summary>
            Property names to pascal case (e.g. `PascalCase`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.SnakeCase">
            <summary>
            Property names to snake case (e.g. `Snake_Case`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.LowerSnakeCase">
            <summary>
            Property names to lower snake case (e.g. `lower_snake_case`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.UpperSnakeCase">
            <summary>
            Property names to upper snake case (e.g. `UPPER_SNAKE_CASE`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.KebabCase">
            <summary>
            Property names to kebab case (e.g. `Kebab-Case`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNameResolvers.UpperKebabCase">
            <summary>
            Property names to upper kebab case (e.g. `UPPER-KEBAB-CASE`).
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.PropertyNamingMethod">
            <summary>
            Declares a property naming method which is used to alter property names.
            </summary>
            <param name="input">The property name.</param>
            <returns>The altered property name.</returns>
        </member>
        <member name="T:Json.Schema.Generation.PropertyNamingMethods">
            <summary>
            Defines a set of predefined property naming methods.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.AsDeclared">
            <summary>
            Makes no changes.  Properties are generated as they are declared in code.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.CamelCase">
            <summary>
            Updates property names to camel case (e.g. `camelCase`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.PascalCase">
            <summary>
            Updates property names to pascal case (e.g. `PascalCase`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.SnakeCase">
            <summary>
            Updates property names to snake case (e.g. `Snake_Case`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.LowerSnakeCase">
            <summary>
            Updates property names to lower snake case (e.g. `lower_snake_case`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.UpperSnakeCase">
            <summary>
            Updates property names to upper snake case (e.g. `UPPER_SNAKE_CASE`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.KebabCase">
            <summary>
            Updates property names to kebab case (e.g. `Kebab-Case`).
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyNamingMethods.UpperKebabCase">
            <summary>
            Updates property names to upper kebab case (e.g. `UPPER-KEBAB-CASE`).
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.PropertyOrder">
            <summary>
            Indicates the sequence in which properties will be listed in the schema.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyOrder.AsDeclared">
            <summary>
            Properties will be listed in the order they're declared in code.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.PropertyOrder.ByName">
            <summary>
            Properties will be sorted by name, case-insensitive.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.SchemaGenerationContextBase">
            <summary>
            Provides base functionality and data for generation contexts.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.SchemaGenerationContextBase.True">
            <summary>
            Represents a true schema.
            </summary>
        </member>
        <member name="F:Json.Schema.Generation.SchemaGenerationContextBase.False">
            <summary>
            Represents a false schema.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGenerationContextBase.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGenerationContextBase.ReferenceCount">
            <summary>
            The number of times this context has been referenced.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGenerationContextBase.Intents">
            <summary>
            The keyword intents required for this type.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGenerationContextBase.Hash">
            <summary>
            A calculated hash value that represents and identifies this context.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.SchemaGenerationContextBase.#ctor(System.Type)">
            <summary>
            Creates a new context.
            </summary>
            <param name="type">The type represented by the context.</param>
        </member>
        <member name="M:Json.Schema.Generation.SchemaGenerationContextBase.Apply(Json.Schema.JsonSchemaBuilder)">
            <summary>
            Applies the keyword to the <see cref="T:Json.Schema.JsonSchemaBuilder"/>.
            </summary>
            <param name="builder">The schema builder.</param>
            <returns>The schema builder (for fluent syntax support).</returns>
        </member>
        <member name="T:Json.Schema.Generation.SchemaGenerationContextCache">
            <summary>
            Gets the contexts for the current run.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.SchemaGenerationContextCache.Get(System.Type,System.Collections.Generic.List{System.Attribute})">
            <summary>
            Gets or creates a <see cref="T:Json.Schema.Generation.SchemaGenerationContextBase"/> based on the given
            type and attribute set.
            </summary>
            <param name="type">The type to generate.</param>
            <param name="memberAttributes">
            A collection of extra attributes.  Only use if requesting a context to represent
            a member.
            </param>
            <returns>
            A generation context, from the cache if one exists with the specified
            type and attribute set; otherwise a new one.  New contexts are automatically
            cached.  If <paramref name="memberAttributes"/> is null or empty, a
            <see cref="T:Json.Schema.Generation.TypeGenerationContext"/> will be returned; otherwise a
            <see cref="T:Json.Schema.Generation.MemberGenerationContext"/>.
            </returns>
            <remarks>
            Use this in your generator if it needs to create keywords with subschemas.
            </remarks>
        </member>
        <member name="T:Json.Schema.Generation.SchemaGenerationContextOptimizer">
            <summary>
            Provides meta-data about the generation process.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGenerationContextOptimizer.TypeNameGenerator">
            <summary>
            Provides custom naming functionality.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.SchemaGeneratorConfiguration">
            <summary>
            Provides additional configuration for the generator.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.Refiners">
            <summary>
            A collection of refiners.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.Generators">
            <summary>
            A collection of generators in addition to the global set.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.PropertyOrder">
            <summary>
            Gets or sets the order in which properties will be listed in the schema.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.PropertyNamingMethod">
            <summary>
            Gets or sets the property naming method.  Default is <see cref="F:Json.Schema.Generation.PropertyNamingMethods.AsDeclared"/>.
            </summary>
            <remarks>
            This can be replaced with any `Func&lt;string, string&gt;`.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolving method. Default is <see cref="F:Json.Schema.Generation.PropertyNameResolvers.AsDeclared"/>.
            </summary>
            <remarks>
            This can be replaced with any `Func&lt;MemberInfo, string&gt;`.
            </remarks>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.Nullability">
            <summary>
            Gets or sets whether to include `null` in the `type` keyword.
            Default is <see cref="F:Json.Schema.Generation.Nullability.Disabled"/> which means that it will
            not ever be included.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.Optimize">
            <summary>
            Gets or sets whether optimizations (moving common subschemas into `$defs`) will be performed.  Default is true.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.StrictConditionals">
            <summary>
            Gets or sets whether properties that are affected by conditionals are defined
            globally or only within their respective `then` subschemas.  True restricts
            those property definitions to `then` subschemas and adds a top-level
            `unevaluatedProperties: false`; false (default) defines them globally.
            </summary>
        </member>
        <member name="P:Json.Schema.Generation.SchemaGeneratorConfiguration.Current">
            <summary>
            Thread-static storage of the current configuration. Only to be used for reading
            the configuration. Setting values on this object will be overwritten when starting
            generation.
            </summary>
        </member>
        <member name="T:Json.Schema.Generation.TypeExtensions">
            <summary>
            Provides informative methods for types.
            </summary>
        </member>
        <member name="M:Json.Schema.Generation.TypeExtensions.IsArray(System.Type)">
            <summary>
            Determines whether the type is a simple, one-dimensional, non-keyed collection.
            </summary>
            <param name="type">The type.</param>
            <returns>true if the type represents an array; false otherwise.</returns>
        </member>
        <member name="M:Json.Schema.Generation.TypeExtensions.IsNullableValueType(System.Type)">
            <summary>
            Determines if the type is a nullable value type, i.e. <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="type">The type</param>
            <returns>True if the type is <see cref="T:System.Nullable`1"/>; false otherwise.</returns>
        </member>
        <member name="T:Json.Schema.Generation.TypeGenerationContext">
            <summary>
            Provides a context for generating schemas for types.
            </summary>
        </member>
    </members>
</doc>
