<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonPointer.Net</name>
    </assembly>
    <members>
        <member name="T:Json.Pointer.CharExtensions">
            <summary>
            Extensions for <seealso cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:Json.Pointer.CharExtensions.IsHexadecimal(System.Char)">
            <summary>
            Determines if the char represents a hexadecimal value.
            </summary>
            <param name="c">A <see cref="T:System.Char"/>.</param>
            <returns>`true` if the character is in the ranges `0-9`, `a-z`, or `A-Z`; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.CharExtensions.GetHexadecimalValue(System.Char)">
            <summary>
            Translates the character to its hexadecimal numeric value.
            </summary>
            <param name="c">A <see cref="T:System.Char"/>.</param>
            <returns>0-9 for `0-9`; 11-15 for `a-f` and `A-F`.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="c"/> is not a valid hexadecimal character.</exception>
        </member>
        <member name="T:Json.Pointer.EnumerableExtensions">
            <summary>
            More extensions on <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Json.Pointer.EnumerableExtensions.GetCollectionHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a collection-oriented hash code by combining the hash codes of its elements.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="collection">The collection of elements.</param>
            <returns>A singular integer value that represents the collection.</returns>
            <remarks>This can be used to correctly compare the contents of collections.</remarks>
        </member>
        <member name="T:Json.Pointer.JsonPointer">
            <summary>
            Represents a JSON Pointer IAW RFC 6901.
            </summary>
        </member>
        <member name="F:Json.Pointer.JsonPointer.Empty">
            <summary>
            The empty pointer.
            </summary>
        </member>
        <member name="P:Json.Pointer.JsonPointer.Segments">
            <summary>
            Gets the collection of pointer segments.
            </summary>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Parse(System.String)">
            <summary>
            Parses a JSON Pointer from a string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A JSON Pointer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:Json.Pointer.PointerParseException"><paramref name="source"/> does not contain a valid pointer or contains a pointer of the wrong kind.</exception>
        </member>
        <member name="M:Json.Pointer.JsonPointer.TryParse(System.String,Json.Pointer.JsonPointer@)">
            <summary>
            Parses a JSON Pointer from a string.
            </summary>
            <param name="source">The source string.</param>
            <param name="pointer">The resulting pointer.</param>
            <returns>`true` if the parse was successful; `false` otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Create(Json.Pointer.PointerSegment[])">
            <summary>
            Creates a new JSON Pointer from a collection of segments.
            </summary>
            <param name="segments">A collection of segments.</param>
            <returns>The JSON Pointer.</returns>
            <remarks>This method creates un-encoded pointers only.</remarks>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Create(System.Collections.Generic.IEnumerable{Json.Pointer.PointerSegment})">
            <summary>
            Creates a new JSON Pointer from a collection of segments.
            </summary>
            <param name="segments">A collection of segments.</param>
            <returns>The JSON Pointer.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Generates a JSON Pointer from a lambda expression.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="expression">The lambda expression which gives the pointer path.</param>
            <returns>The JSON Pointer.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the lambda expression contains a node that is not a property access or
            <see cref="T:System.Int32"/>-valued indexer.
            </exception>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Combine(Json.Pointer.JsonPointer)">
            <summary>
            Concatenates a pointer onto the current pointer.
            </summary>
            <param name="other">Another pointer.</param>
            <returns>A new pointer.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Combine(Json.Pointer.PointerSegment[])">
            <summary>
            Concatenates additional segments onto the current pointer.
            </summary>
            <param name="additionalSegments">The additional segments.</param>
            <returns>A new pointer.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Evaluate(System.Text.Json.JsonElement)">
            <summary>
            Evaluates the pointer over a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="root">The <see cref="T:System.Text.Json.JsonElement"/>.</param>
            <returns>The sub-element at the pointer's location, or null if the path does not exist.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.TryEvaluate(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Evaluates the pointer over a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="root">The <see cref="T:System.Text.Json.Nodes.JsonNode"/>.</param>
            <param name="result">The result, if return value is true; null otherwise</param>
            <returns>true if a value exists at the indicate path; false otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.ToString(Json.Pointer.JsonPointerStyle)">
            <summary>Returns the string representation of this instance.</summary>
            <param name="pointerStyle">Indicates whether to URL-encode the pointer.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.ToString">
            <summary>Returns the string representation of this instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Equals(Json.Pointer.JsonPointer)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.op_Equality(Json.Pointer.JsonPointer,Json.Pointer.JsonPointer)">
            <summary>
            Evaluates equality via <see cref="M:Json.Pointer.JsonPointer.Equals(Json.Pointer.JsonPointer)"/>.
            </summary>
            <param name="left">A JSON Pointer.</param>
            <param name="right">A JSON Pointer.</param>
            <returns>`true` if the pointers are equal; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.JsonPointer.op_Inequality(Json.Pointer.JsonPointer,Json.Pointer.JsonPointer)">
            <summary>
            Evaluates inequality via <see cref="M:Json.Pointer.JsonPointer.Equals(Json.Pointer.JsonPointer)"/>.
            </summary>
            <param name="left">A JSON Pointer.</param>
            <param name="right">A JSON Pointer.</param>
            <returns>`false` if the pointers are equal; `true` otherwise.</returns>
        </member>
        <member name="T:Json.Pointer.JsonPointerStyle">
            <summary>
            Enumerates the different styles of JSON pointers.
            </summary>
        </member>
        <member name="F:Json.Pointer.JsonPointerStyle.Unspecified">
            <summary>
            No format specified.
            </summary>
        </member>
        <member name="F:Json.Pointer.JsonPointerStyle.Plain">
            <summary>
            Indicates only plain JSON pointers.
            </summary>
        </member>
        <member name="F:Json.Pointer.JsonPointerStyle.UriEncoded">
            <summary>
            Indicates only URI-encoded JSON pointers.
            </summary>
        </member>
        <member name="T:Json.Pointer.PointerParseException">
            <summary>
            Thrown during parsing when the source string contains invalid JSON Pointer data.
            </summary>
        </member>
        <member name="M:Json.Pointer.PointerParseException.#ctor">
            <summary>
            Creates a <see cref="T:Json.Pointer.PointerParseException"/>.
            </summary>
        </member>
        <member name="M:Json.Pointer.PointerParseException.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Json.Pointer.PointerParseException"/>.
            </summary>
        </member>
        <member name="M:Json.Pointer.PointerParseException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <see cref="T:Json.Pointer.PointerParseException"/>.
            </summary>
        </member>
        <member name="T:Json.Pointer.PointerSegment">
            <summary>
            Represents a single segment of a JSON Pointer.
            </summary>
        </member>
        <member name="P:Json.Pointer.PointerSegment.Value">
            <summary>
            Gets the segment value.
            </summary>
        </member>
        <member name="M:Json.Pointer.PointerSegment.Parse(System.String)">
            <summary>
            Parses a JSON Pointer segment from a string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A JSON Pointer segment.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:Json.Pointer.PointerParseException"><paramref name="source"/> contains an invalid escape sequence or an invalid URI-encoded sequence or ends with `~`.</exception>
        </member>
        <member name="M:Json.Pointer.PointerSegment.TryParse(System.String,Json.Pointer.PointerSegment@)">
            <summary>
            Parses a JSON Pointer segment from a string.
            </summary>
            <param name="source">The source string.</param>
            <param name="segment">The resulting segments.</param>
            <returns>`true` if the parse was successful; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Json.Pointer.PointerSegment"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.ToString(Json.Pointer.JsonPointerStyle)">
            <summary>Returns the string representation of this instance.</summary>
            <param name="pointerStyle">Indicates whether to URL-encode the pointer.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.Equals(Json.Pointer.PointerSegment)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.op_Equality(Json.Pointer.PointerSegment,Json.Pointer.PointerSegment)">
            <summary>
            Evaluates equality via <see cref="M:Json.Pointer.PointerSegment.Equals(Json.Pointer.PointerSegment)"/>.
            </summary>
            <param name="left">A JSON Pointer.</param>
            <param name="right">A JSON Pointer.</param>
            <returns>`true` if the pointers are equal; `false` otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.op_Inequality(Json.Pointer.PointerSegment,Json.Pointer.PointerSegment)">
            <summary>
            Evaluates inequality via <see cref="M:Json.Pointer.PointerSegment.Equals(Json.Pointer.PointerSegment)"/>.
            </summary>
            <param name="left">A JSON Pointer.</param>
            <param name="right">A JSON Pointer.</param>
            <returns>`false` if the pointers are equal; `true` otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.PointerSegment.op_Implicit(System.Int32)~Json.Pointer.PointerSegment">
            <summary>
            Implicitly casts an <see cref="T:System.UInt32"/> to a <see cref="T:Json.Pointer.PointerSegment"/>.
            </summary>
            <param name="value">A pointer segment that represents the value.</param>
            <remarks>No URI encoding is performed for implicit casts.</remarks>
        </member>
        <member name="M:Json.Pointer.PointerSegment.op_Implicit(System.UInt32)~Json.Pointer.PointerSegment">
            <summary>
            Implicitly casts an <see cref="T:System.UInt32"/> to a <see cref="T:Json.Pointer.PointerSegment"/>.
            </summary>
            <param name="value">A pointer segment that represents the value.</param>
            <remarks>No URI encoding is performed for implicit casts.</remarks>
        </member>
        <member name="M:Json.Pointer.PointerSegment.op_Implicit(System.String)~Json.Pointer.PointerSegment">
            <summary>
            Implicitly casts a <see cref="T:System.String"/> to a <see cref="T:Json.Pointer.PointerSegment"/>.
            </summary>
            <param name="value">A pointer segment that represents the value.</param>
            <remarks>No URI encoding is performed for implicit casts.</remarks>
        </member>
        <member name="T:Json.Pointer.RelativeJsonPointer">
            <summary>
            Represents a Relative JSON Pointer IAW draft-handrews-relative-json-pointer-02
            </summary>
        </member>
        <member name="F:Json.Pointer.RelativeJsonPointer.Null">
            <summary>
            The null pointer.  Indicates no navigation should occur.
            </summary>
        </member>
        <member name="P:Json.Pointer.RelativeJsonPointer.IsIndexQuery">
            <summary>
            Gets whether the pointer is an index query, which returns the index within the parent rather than the value.
            </summary>
        </member>
        <member name="P:Json.Pointer.RelativeJsonPointer.ParentSteps">
            <summary>
            Gets the number of parent (root) steps to take.
            </summary>
        </member>
        <member name="P:Json.Pointer.RelativeJsonPointer.ArrayIndexManipulator">
            <summary>
            Gets the number of lateral steps to take.  Applicable only for arrays.
            </summary>
        </member>
        <member name="P:Json.Pointer.RelativeJsonPointer.Pointer">
            <summary>
            Gets the pointer to follow after taking <see cref="P:Json.Pointer.RelativeJsonPointer.ParentSteps"/> steps upward.
            </summary>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.IndexQuery(System.UInt32)">
            <summary>
            Creates an index query pointer.
            </summary>
            <param name="parentSteps"></param>
            <returns>A Relative JSON Pointer.</returns>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.IndexQuery(System.UInt32,System.Int32)">
            <summary>
            Creates an index query pointer.
            </summary>
            <param name="parentSteps"></param>
            <param name="arrayIndexManipulator">The index manipulator.</param>
            <returns>A Relative JSON Pointer.</returns>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.FromPointer(System.UInt32,Json.Pointer.JsonPointer)">
            <summary>
            Creates a Relative JSON Pointer from a JSON Pointer and a number of parent steps.
            </summary>
            <param name="parentSteps">The number of parent steps.</param>
            <param name="pointer">The JSON Pointer.</param>
            <returns>A Relative JSON Pointer.</returns>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.FromPointer(System.UInt32,System.Int32,Json.Pointer.JsonPointer)">
            <summary>
            Creates a Relative JSON Pointer from a JSON Pointer and a number of parent steps.
            </summary>
            <param name="parentSteps">The number of parent steps.</param>
            <param name="arrayIndexManipulator">The index manipulator.</param>
            <param name="pointer">The JSON Pointer.</param>
            <returns>A Relative JSON Pointer.</returns>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.Parse(System.String)">
            <summary>
            Parses a JSON Pointer segment from a string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A Relative JSON Pointer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:Json.Pointer.PointerParseException"><paramref name="source"/> does not contain a valid relative pointer.</exception>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.TryParse(System.String,Json.Pointer.RelativeJsonPointer@)">
            <summary>
            Parses a JSON Pointer from a string.
            </summary>
            <param name="source">The source string.</param>
            <param name="relativePointer">The resulting relative pointer.</param>
            <returns>`true` if the parse was successful; `false` otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.TryEvaluate(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Evaluates the relative pointer over a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode"/>.</param>
            <param name="result">The result, if return value is true; null otherwise</param>
            <returns>true if a value exists at the indicate path; false otherwise.</returns>
        </member>
        <member name="M:Json.Pointer.RelativeJsonPointer.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
    </members>
</doc>
